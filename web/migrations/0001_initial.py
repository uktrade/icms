# Generated by Django 3.2.5 on 2021-09-24 11:31

import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import guardian.mixins
from django.db import migrations, models

import web.domains.workbasket.base
import web.models.mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Permissions",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
            ],
            options={
                "permissions": (
                    ("importer_access", "Can act as an importer"),
                    ("exporter_access", "Can act as an exporter"),
                    ("reference_data_access", "Can maintain reference data"),
                    ("mailshot_access", "Can maintain mailshots"),
                ),
                "managed": False,
                "default_permissions": [],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(blank=True, null=True, verbose_name="last login"),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(blank=True, max_length=150, verbose_name="first name"),
                ),
                (
                    "last_name",
                    models.CharField(blank=True, max_length=150, verbose_name="last name"),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="email address"),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("title", models.CharField(max_length=20, null=True)),
                ("preferred_first_name", models.CharField(blank=True, max_length=4000, null=True)),
                ("middle_initials", models.CharField(blank=True, max_length=40, null=True)),
                ("organisation", models.CharField(max_length=4000, null=True)),
                ("department", models.CharField(max_length=4000, null=True)),
                ("job_title", models.CharField(max_length=320, null=True)),
                ("location_at_address", models.CharField(blank=True, max_length=4000, null=True)),
                ("work_address", models.CharField(max_length=300, null=True)),
                ("date_of_birth", models.DateField(null=True)),
                ("security_question", models.CharField(max_length=4000, null=True)),
                ("security_answer", models.CharField(max_length=4000, null=True)),
                ("share_contact_details", models.BooleanField(default=False)),
                (
                    "account_status",
                    models.CharField(
                        choices=[
                            ("NEW", "New"),
                            ("BLOCKED", "Blocked"),
                            ("SUSPENDED", "Suspended"),
                            ("CANCELLED", "Cancelled"),
                            ("ACTIVE", "Active"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                ("account_status_date", models.DateField(blank=True, null=True)),
                (
                    "password_disposition",
                    models.CharField(
                        blank=True,
                        choices=[("TEMPORARY", "Temporary"), ("FULL", "Full")],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("unsuccessful_login_attempts", models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                "ordering": ("-is_active", "first_name"),
            },
            bases=(models.Model, guardian.mixins.GuardianUserMixin),
        ),
        migrations.CreateModel(
            name="ActQuantity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("quantity", models.IntegerField(blank=True, null=True)),
                ("infinity", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="AlternativeEmail",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                (
                    "type",
                    models.CharField(
                        choices=[("WORK", "Work"), ("HOME", "Home")], default="WORK", max_length=30
                    ),
                ),
                ("portal_notifications", models.BooleanField(default=False)),
                ("comment", models.CharField(blank=True, max_length=4000, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CaseEmail",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("status", models.CharField(default="DRAFT", max_length=30)),
                ("to", models.EmailField(max_length=254, null=True)),
                (
                    "cc_address_list",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.EmailField(max_length=254),
                        blank=True,
                        help_text="Enter CC email addresses separated by a comma",
                        null=True,
                        size=15,
                        verbose_name="Cc",
                    ),
                ),
                ("subject", models.CharField(max_length=100, null=True)),
                ("body", models.TextField(max_length=4000, null=True)),
                ("response", models.TextField(max_length=4000, null=True)),
                ("sent_datetime", models.DateTimeField(null=True)),
                ("closed_datetime", models.DateTimeField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="CaseNote",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("DRAFT", "Draft"), ("COMPLETED", "Completed")],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                ("note", models.TextField(blank=True, null=True)),
                ("create_datetime", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["-create_datetime"],
            },
        ),
        migrations.CreateModel(
            name="CaseReference",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("prefix", models.CharField(max_length=8)),
                ("year", models.IntegerField(null=True)),
                ("reference", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="CFSProduct",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("product_name", models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name="CFSProductActiveIngredient",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=500)),
                ("cas_number", models.CharField(max_length=50, verbose_name="CAS Number")),
            ],
        ),
        migrations.CreateModel(
            name="CFSProductType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "product_type_number",
                    models.IntegerField(
                        choices=[
                            (1, 1),
                            (2, 2),
                            (3, 3),
                            (4, 4),
                            (5, 5),
                            (6, 6),
                            (7, 7),
                            (8, 8),
                            (9, 9),
                            (10, 10),
                            (11, 11),
                            (12, 12),
                            (13, 13),
                            (14, 14),
                            (15, 15),
                            (16, 16),
                            (17, 17),
                            (18, 18),
                            (19, 19),
                            (20, 20),
                            (21, 21),
                            (22, 22),
                        ]
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CFSSchedule",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "exporter_status",
                    models.CharField(
                        choices=[
                            ("MANUFACTURER", "I am the manufacturer"),
                            ("NOT_MANUFACTURER", "I am not the manufacturer"),
                        ],
                        default=None,
                        max_length=16,
                        null=True,
                        verbose_name="Exporter Status",
                    ),
                ),
                (
                    "brand_name_holder",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        default=None,
                        max_length=3,
                        null=True,
                        verbose_name="Are you the Brand name holder?",
                    ),
                ),
                (
                    "product_eligibility",
                    models.CharField(
                        choices=[
                            (
                                "SOLD_ON_UK_MARKET",
                                "The products are currently sold on the UK market",
                            ),
                            (
                                "MEET_UK_PRODUCT_SAFETY",
                                "The products meet the product safety requirements to be sold on the UK market",
                            ),
                        ],
                        default=None,
                        help_text="If your products are currently for export only, you MUST select The products meet the product safety requirements to be sold on the UK market",
                        max_length=22,
                        null=True,
                        verbose_name="Product Eligibility",
                    ),
                ),
                (
                    "goods_placed_on_uk_market",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        default=None,
                        max_length=3,
                        null=True,
                        verbose_name="Have you placed the goods on the UK market or intend to place on UK market in future?",
                    ),
                ),
                (
                    "goods_export_only",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        default=None,
                        max_length=3,
                        null=True,
                        verbose_name="Are these goods for export only and will never be placed by you on the UK market?",
                    ),
                ),
                (
                    "any_raw_materials",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        default=None,
                        help_text="Only choose 'Yes' if the product is a material used in the manufacture of a finished product.",
                        max_length=3,
                        null=True,
                        verbose_name="Are any of the products raw materials?",
                    ),
                ),
                ("final_product_end_use", models.CharField(blank=True, max_length=4000, null=True)),
                (
                    "schedule_statements_accordance_with_standards",
                    models.BooleanField(
                        default=False,
                        help_text="Select if applicable",
                        verbose_name="Schedule Statements",
                    ),
                ),
                (
                    "schedule_statements_is_responsible_person",
                    models.BooleanField(
                        default=False, help_text="Select if applicable", verbose_name=""
                    ),
                ),
                (
                    "manufacturer_name",
                    models.CharField(max_length=200, null=True, verbose_name="Name"),
                ),
                (
                    "manufacturer_address_entry_type",
                    models.CharField(
                        choices=[("M", "Manual"), ("S", "Search")],
                        default="M",
                        max_length=10,
                        verbose_name="Address Type",
                    ),
                ),
                (
                    "manufacturer_postcode",
                    models.CharField(blank=True, max_length=30, null=True, verbose_name="Postcode"),
                ),
                (
                    "manufacturer_address",
                    models.CharField(
                        blank=True, max_length=4000, null=True, verbose_name="Address"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="CFSScheduleParagraph",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("order", models.IntegerField()),
                ("name", models.CharField(max_length=100)),
                ("content", models.TextField(null=True)),
            ],
            options={
                "ordering": ("order",),
            },
        ),
        migrations.CreateModel(
            name="ChecklistFirearmsOILApplication",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "case_update",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Case update required from applicant?",
                    ),
                ),
                (
                    "fir_required",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Further information request required?",
                    ),
                ),
                (
                    "response_preparation",
                    models.BooleanField(
                        default=False,
                        verbose_name="Response Preparation - approve/refuse the request, edit details if necessary",
                    ),
                ),
                (
                    "validity_period_correct",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Validity period correct?",
                    ),
                ),
                (
                    "endorsements_listed",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Correct endorsements listed? Add/edit/remove as required (changes are automatically saved)",
                    ),
                ),
                (
                    "authorisation",
                    models.BooleanField(
                        default=False,
                        verbose_name="Authorisation - start authorisation (close case processing) to authorise the licence. Errors logged must be resolved.",
                    ),
                ),
                (
                    "authority_required",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=10,
                        null=True,
                        verbose_name="Authority to possess required?",
                    ),
                ),
                (
                    "authority_received",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=10,
                        null=True,
                        verbose_name="Authority to possess received?",
                    ),
                ),
                (
                    "authority_police",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=10,
                        null=True,
                        verbose_name="Authority to possess checked with police?",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ClauseQuantity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("quantity", models.IntegerField(blank=True, null=True)),
                ("infinity", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Commodity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("commodity_code", models.CharField(max_length=10)),
                ("validity_start_date", models.DateField()),
                ("validity_end_date", models.DateField(blank=True, null=True)),
                ("quantity_threshold", models.IntegerField(blank=True, null=True)),
                ("sigl_product_type", models.CharField(blank=True, max_length=3, null=True)),
                ("start_datetime", models.DateTimeField(auto_now_add=True)),
                ("end_datetime", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ("-is_active", "commodity_code"),
            },
            bases=(web.models.mixins.Archivable, models.Model),
        ),
        migrations.CreateModel(
            name="CommodityGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "group_type",
                    models.CharField(
                        choices=[("AUTO", "Auto"), ("CATEGORY", "Category")],
                        default="AUTO",
                        max_length=20,
                    ),
                ),
                ("group_code", models.CharField(max_length=25)),
                ("group_name", models.CharField(blank=True, max_length=100, null=True)),
                ("group_description", models.CharField(blank=True, max_length=4000, null=True)),
                ("start_datetime", models.DateTimeField(auto_now_add=True)),
                ("end_datetime", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ("-is_active", "group_code"),
            },
            bases=(web.models.mixins.Archivable, models.Model),
        ),
        migrations.CreateModel(
            name="CommodityType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("type_code", models.CharField(max_length=20)),
                ("type", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="Constabulary",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                (
                    "region",
                    models.CharField(
                        choices=[
                            ("EM", "East Midlands"),
                            ("ER", "Eastern"),
                            ("IM", "Isle of Man"),
                            ("LO", "London"),
                            ("NE", "North East"),
                            ("NW", "North WEST"),
                            ("RU", "Royal Ulster"),
                            ("SC", "Scotland"),
                            ("SE", "South East"),
                            ("SW", "South West"),
                            ("WM", "West Midlands"),
                        ],
                        max_length=3,
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ("-is_active", "name"),
            },
            bases=(web.models.mixins.Archivable, models.Model),
        ),
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=4000)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("SOVEREIGN_TERRITORY", "Sovereign Territory"),
                            ("SYSTEM", "System"),
                        ],
                        max_length=30,
                    ),
                ),
                ("commission_code", models.CharField(max_length=20)),
                ("hmrc_code", models.CharField(max_length=20)),
            ],
            options={
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="CountryGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=4000, unique=True)),
                ("comments", models.CharField(blank=True, max_length=4000, null=True)),
                (
                    "countries",
                    models.ManyToManyField(
                        blank=True, related_name="country_groups", to="web.Country"
                    ),
                ),
            ],
            options={
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="CountryTranslationSet",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ("-is_active", "name"),
            },
            bases=(web.models.mixins.Archivable, models.Model),
        ),
        migrations.CreateModel(
            name="DerogationsChecklist",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "case_update",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Case update required from applicant?",
                    ),
                ),
                (
                    "fir_required",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Further information request required?",
                    ),
                ),
                (
                    "response_preparation",
                    models.BooleanField(
                        default=False,
                        verbose_name="Response Preparation - approve/refuse the request, edit details if necessary",
                    ),
                ),
                (
                    "validity_period_correct",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Validity period correct?",
                    ),
                ),
                (
                    "endorsements_listed",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Correct endorsements listed? Add/edit/remove as required (changes are automatically saved)",
                    ),
                ),
                (
                    "authorisation",
                    models.BooleanField(
                        default=False,
                        verbose_name="Authorisation - start authorisation (close case processing) to authorise the licence. Errors logged must be resolved.",
                    ),
                ),
                (
                    "supporting_document_received",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=10,
                        null=True,
                        verbose_name="Supporting documentation received?",
                    ),
                ),
                (
                    "sncorf_consulted",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Syria National Coalition for Opposition and Revolutionary Forces (SNCORF) consulted?",
                    ),
                ),
                (
                    "sncorf_response_within_30_days",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="SNCORF response within 30 days of consultation?",
                    ),
                ),
                (
                    "beneficiaries_not_on_list",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Beneficiaries not on Syria sanctions list?",
                    ),
                ),
                (
                    "request_purpose_confirmed",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Purpose of Syria request confirmed?",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DFLChecklist",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "case_update",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Case update required from applicant?",
                    ),
                ),
                (
                    "fir_required",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Further information request required?",
                    ),
                ),
                (
                    "response_preparation",
                    models.BooleanField(
                        default=False,
                        verbose_name="Response Preparation - approve/refuse the request, edit details if necessary",
                    ),
                ),
                (
                    "validity_period_correct",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Validity period correct?",
                    ),
                ),
                (
                    "endorsements_listed",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Correct endorsements listed? Add/edit/remove as required (changes are automatically saved)",
                    ),
                ),
                (
                    "authorisation",
                    models.BooleanField(
                        default=False,
                        verbose_name="Authorisation - start authorisation (close case processing) to authorise the licence. Errors logged must be resolved.",
                    ),
                ),
                (
                    "deactivation_certificate_attached",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Deactivation certificate attached?",
                    ),
                ),
                (
                    "deactivation_certificate_issued",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Deactivation certificate issued by competent authority?",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DFLSupplementaryInfo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_complete", models.BooleanField(default=False)),
                ("completed_datetime", models.DateTimeField(null=True)),
                (
                    "no_report_reason",
                    models.CharField(
                        max_length=1000,
                        null=True,
                        verbose_name="You haven't provided any reports on imported firearms. You must provide a reason why no reporting is required before you confirm reporting complete.",
                    ),
                ),
                (
                    "completed_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="web.user",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DFLSupplementaryReport",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "transport",
                    models.CharField(
                        choices=[
                            ("air", "Air"),
                            ("rail", "Rail"),
                            ("road", "Road"),
                            ("sea", "Sea"),
                        ],
                        max_length=4,
                    ),
                ),
                ("date_received", models.DateField(verbose_name="Date Received")),
                ("created", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EndorsementImportApplication",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("content", models.TextField()),
                ("created_datetime", models.DateTimeField(auto_now_add=True)),
                ("updated_datetime", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("filename", models.CharField(max_length=300)),
                ("content_type", models.CharField(max_length=100)),
                ("file_size", models.IntegerField()),
                ("path", models.CharField(max_length=4000)),
                ("created_datetime", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="web.user"),
                ),
            ],
            options={
                "ordering": ["-created_datetime"],
            },
            bases=(web.models.mixins.Archivable, models.Model),
        ),
        migrations.CreateModel(
            name="GMPBrand",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("brand_name", models.CharField(max_length=20, verbose_name="Name of the brand")),
            ],
        ),
        migrations.CreateModel(
            name="ImportApplicationType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField()),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("SAN", "Derogation from Sanctions Import Ban"),
                            ("FA", "Firearms and Ammunition"),
                            ("IS", "Iron and Steel (Quota)"),
                            ("OPT", "Outward Processing Trade"),
                            ("ADHOC", "Sanctions and Adhoc Licence Application"),
                            ("SPS", "Prior Surveillance"),
                            ("TEX", "Textiles (Quota)"),
                            ("WD", "Wood (Quota)"),
                        ],
                        max_length=70,
                    ),
                ),
                (
                    "sub_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("OIL", "Open Individual Import Licence"),
                            ("DEACTIVATED", "Deactivated Firearms Import Licence"),
                            ("SIL", "Specific Individual Import Licence"),
                        ],
                        max_length=70,
                        null=True,
                    ),
                ),
                ("licence_type_code", models.CharField(max_length=20)),
                ("sigl_flag", models.BooleanField()),
                ("chief_flag", models.BooleanField()),
                ("chief_licence_prefix", models.CharField(blank=True, max_length=10, null=True)),
                ("paper_licence_flag", models.BooleanField()),
                ("electronic_licence_flag", models.BooleanField()),
                ("cover_letter_flag", models.BooleanField()),
                ("cover_letter_schedule_flag", models.BooleanField()),
                ("category_flag", models.BooleanField()),
                ("sigl_category_prefix", models.CharField(blank=True, max_length=100, null=True)),
                ("chief_category_prefix", models.CharField(blank=True, max_length=10, null=True)),
                ("default_licence_length_months", models.IntegerField(blank=True, null=True)),
                ("endorsements_flag", models.BooleanField()),
                ("default_commodity_desc", models.CharField(blank=True, max_length=200, null=True)),
                ("quantity_unlimited_flag", models.BooleanField()),
                ("unit_list_csv", models.CharField(blank=True, max_length=200, null=True)),
                ("exp_cert_upload_flag", models.BooleanField()),
                ("supporting_docs_upload_flag", models.BooleanField()),
                ("multiple_commodities_flag", models.BooleanField()),
                ("guidance_file_url", models.CharField(blank=True, max_length=4000, null=True)),
                (
                    "licence_category_description",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                ("usage_auto_category_desc_flag", models.BooleanField()),
                ("case_checklist_flag", models.BooleanField()),
                ("importer_printable", models.BooleanField()),
                (
                    "commodity_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="web.commoditytype",
                    ),
                ),
                (
                    "consignment_country_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="import_application_types_to",
                        to="web.countrygroup",
                    ),
                ),
            ],
            options={
                "ordering": ("type", "sub_type"),
            },
        ),
        migrations.CreateModel(
            name="ImportContact",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "entity",
                    models.CharField(
                        choices=[("legal", "Legal Person"), ("natural", "Natural Person")],
                        max_length=10,
                    ),
                ),
                ("first_name", models.CharField(max_length=200)),
                ("last_name", models.CharField(blank=True, max_length=200, null=True)),
                ("registration_number", models.CharField(blank=True, max_length=200, null=True)),
                ("street", models.CharField(max_length=200, verbose_name="Street and Number")),
                ("city", models.CharField(max_length=200, verbose_name="Town/City")),
                ("postcode", models.CharField(blank=True, max_length=200, null=True)),
                ("region", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "dealer",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")], max_length=10, null=True
                    ),
                ),
                ("created_datetime", models.DateTimeField(auto_now_add=True)),
                ("updated_datetime", models.DateTimeField(auto_now=True)),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="web.country",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Importer",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("INDIVIDUAL", "Individual"), ("ORGANISATION", "Organisation")],
                        max_length=20,
                        verbose_name="Entity Type",
                    ),
                ),
                (
                    "name",
                    models.TextField(blank=True, default="", verbose_name="Organisation Name"),
                ),
                (
                    "registered_number",
                    models.CharField(
                        blank=True, max_length=15, null=True, verbose_name="Registered Number"
                    ),
                ),
                (
                    "eori_number",
                    models.CharField(
                        blank=True,
                        help_text="EORI number should include the GB prefix",
                        max_length=20,
                        null=True,
                        verbose_name="EORI Number",
                    ),
                ),
                (
                    "eori_number_ni",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="NI EORI Number"
                    ),
                ),
                (
                    "region_origin",
                    models.CharField(
                        blank=True,
                        choices=[(None, "UK"), ("E", "Europe"), ("O", "Non-European")],
                        max_length=1,
                        null=True,
                    ),
                ),
                ("comments", models.TextField(blank=True, null=True)),
                (
                    "main_importer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="agents",
                        to="web.importer",
                    ),
                ),
            ],
            options={
                "ordering": ("-is_active", "name"),
                "permissions": [
                    ("is_contact_of_importer", "Is contact of this importer"),
                    ("is_agent_of_importer", "Is agent of this importer"),
                ],
            },
            bases=(web.models.mixins.Archivable, models.Model),
        ),
        migrations.CreateModel(
            name="IronSteelChecklist",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "case_update",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Case update required from applicant?",
                    ),
                ),
                (
                    "fir_required",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Further information request required?",
                    ),
                ),
                (
                    "response_preparation",
                    models.BooleanField(
                        default=False,
                        verbose_name="Response Preparation - approve/refuse the request, edit details if necessary",
                    ),
                ),
                (
                    "validity_period_correct",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Validity period correct?",
                    ),
                ),
                (
                    "endorsements_listed",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Correct endorsements listed? Add/edit/remove as required (changes are automatically saved)",
                    ),
                ),
                (
                    "authorisation",
                    models.BooleanField(
                        default=False,
                        verbose_name="Authorisation - start authorisation (close case processing) to authorise the licence. Errors logged must be resolved.",
                    ),
                ),
                (
                    "licence_category",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Do the export licence and application categories match, e.g. export licence SA1 and application SA1?",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ObsoleteCalibreGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("is_active", models.BooleanField(default=True)),
                ("order", models.IntegerField()),
            ],
            options={
                "ordering": ("order", "-is_active"),
            },
            bases=(web.models.mixins.Archivable, web.models.mixins.Sortable, models.Model),
        ),
        migrations.CreateModel(
            name="Office",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("postcode", models.CharField(blank=True, max_length=30, null=True)),
                ("address", models.CharField(max_length=4000, null=True)),
                ("eori_number", models.CharField(blank=True, max_length=20, null=True)),
                ("address_entry_type", models.CharField(default="EMPTY", max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name="OILSupplementaryInfo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_complete", models.BooleanField(default=False)),
                ("completed_datetime", models.DateTimeField(null=True)),
                (
                    "no_report_reason",
                    models.CharField(
                        max_length=1000,
                        null=True,
                        verbose_name="You haven't provided any reports on imported firearms. You must provide a reason why no reporting is required before you confirm reporting complete.",
                    ),
                ),
                (
                    "completed_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="web.user",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OILSupplementaryReport",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "transport",
                    models.CharField(
                        choices=[
                            ("air", "Air"),
                            ("rail", "Rail"),
                            ("road", "Road"),
                            ("sea", "Sea"),
                        ],
                        max_length=4,
                    ),
                ),
                ("date_received", models.DateField(verbose_name="Date Received")),
                ("created", models.DateTimeField(auto_now=True)),
                (
                    "bought_from",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="web.importcontact",
                    ),
                ),
                (
                    "supplementary_info",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reports",
                        to="web.oilsupplementaryinfo",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OPTChecklist",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "case_update",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Case update required from applicant?",
                    ),
                ),
                (
                    "fir_required",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Further information request required?",
                    ),
                ),
                (
                    "response_preparation",
                    models.BooleanField(
                        default=False,
                        verbose_name="Response Preparation - approve/refuse the request, edit details if necessary",
                    ),
                ),
                (
                    "validity_period_correct",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Validity period correct?",
                    ),
                ),
                (
                    "authorisation",
                    models.BooleanField(
                        default=False,
                        verbose_name="Authorisation - start authorisation (close case processing) to authorise the licence. Errors logged must be resolved.",
                    ),
                ),
                (
                    "operator_requests_submitted",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Operator requests submitted to commission by set deadline?",
                    ),
                ),
                (
                    "authority_to_issue",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Authority to issue confirmed by European Commission?",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Process",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("process_type", models.CharField(default=None, max_length=50)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("finished", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ProductLegislation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=500)),
                ("is_active", models.BooleanField(default=True)),
                ("is_biocidal", models.BooleanField(default=False)),
                ("is_eu_cosmetics_regulation", models.BooleanField(default=False)),
                ("is_biocidal_claim", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ("-is_active", "name"),
            },
            bases=(web.models.mixins.Archivable, models.Model),
        ),
        migrations.CreateModel(
            name="SanctionEmail",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("name", models.CharField(max_length=255)),
                ("email", models.EmailField(max_length=254, verbose_name="Email Address")),
                ("created_datetime", models.DateTimeField(auto_now_add=True)),
                ("updated_datetime", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ("name",),
            },
            bases=(web.models.mixins.Archivable, models.Model),
        ),
        migrations.CreateModel(
            name="SILChecklist",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "case_update",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Case update required from applicant?",
                    ),
                ),
                (
                    "fir_required",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Further information request required?",
                    ),
                ),
                (
                    "response_preparation",
                    models.BooleanField(
                        default=False,
                        verbose_name="Response Preparation - approve/refuse the request, edit details if necessary",
                    ),
                ),
                (
                    "validity_period_correct",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Validity period correct?",
                    ),
                ),
                (
                    "endorsements_listed",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Correct endorsements listed? Add/edit/remove as required (changes are automatically saved)",
                    ),
                ),
                (
                    "authorisation",
                    models.BooleanField(
                        default=False,
                        verbose_name="Authorisation - start authorisation (close case processing) to authorise the licence. Errors logged must be resolved.",
                    ),
                ),
                (
                    "authority_required",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Authority to possess required?",
                    ),
                ),
                (
                    "authority_received",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Authority to possess received?",
                    ),
                ),
                (
                    "authority_cover_items_listed",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Authority to possess covers items listed?",
                    ),
                ),
                (
                    "quantities_within_authority_restrictions",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Quantities listed within authority to possess restrictions?",
                    ),
                ),
                (
                    "authority_police",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Authority to possess checked with police?",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SILGoodsSection1",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "manufacture",
                    models.BooleanField(
                        null=True, verbose_name="Was the firearm manufactured before 1900?"
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="You no longer need to type the part of the Firearms Act that applies to the item listed in this box. You must select it from the 'Licence for' section.",
                        max_length=4096,
                    ),
                ),
                ("quantity", models.PositiveIntegerField(help_text="Enter a whole number")),
            ],
        ),
        migrations.CreateModel(
            name="SILGoodsSection2",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "manufacture",
                    models.BooleanField(
                        null=True, verbose_name="Was the firearm manufactured before 1900?"
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="You no longer need to type the part of the Firearms Act that applies to the item listed in this box. You must select it from the 'Licence for' section.",
                        max_length=4096,
                    ),
                ),
                ("quantity", models.PositiveIntegerField(help_text="Enter a whole number")),
            ],
        ),
        migrations.CreateModel(
            name="SILGoodsSection5",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "subsection",
                    models.CharField(max_length=300, verbose_name="Section 5 subsection"),
                ),
                (
                    "manufacture",
                    models.BooleanField(
                        null=True, verbose_name="Was the firearm manufactured before 1900?"
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="You no longer need to type the part of the Firearms Act that applies to the item listed in this box. You must select it from the 'Licence for' section.",
                        max_length=4096,
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        blank=True, help_text="Enter a whole number", null=True
                    ),
                ),
                (
                    "unlimited_quantity",
                    models.BooleanField(default=False, verbose_name="Unlimited Quantity"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SILGoodsSection582Obsolete",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "curiosity_ornament",
                    models.BooleanField(
                        null=True,
                        verbose_name="Do you intend to possess the firearm as a 'curiosity or ornament'?",
                    ),
                ),
                (
                    "acknowledgment",
                    models.BooleanField(
                        default=False, verbose_name="Do you acknowledge the above statement?"
                    ),
                ),
                (
                    "centrefire",
                    models.BooleanField(
                        null=True, verbose_name="Is this a breech-loading centrefire firearm?"
                    ),
                ),
                (
                    "manufacture",
                    models.BooleanField(
                        null=True,
                        verbose_name="Was the firearm manufactured after 1899 and before 1939?",
                    ),
                ),
                (
                    "original_chambering",
                    models.BooleanField(
                        null=True, verbose_name="Does the firearm retain its original chambering?"
                    ),
                ),
                (
                    "obsolete_calibre",
                    models.CharField(max_length=50, verbose_name="Obsolete Calibre"),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="You no longer need to type the part of the Firearms Act that applies to the item listed in this box. You must select it from the 'Licence for' section.",
                        max_length=4096,
                    ),
                ),
                ("quantity", models.PositiveIntegerField(help_text="Enter a whole number")),
            ],
        ),
        migrations.CreateModel(
            name="SILGoodsSection582Other",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "curiosity_ornament",
                    models.BooleanField(
                        null=True,
                        verbose_name="Do you intend to possess the firearm as a 'curiosity or ornament'?",
                    ),
                ),
                (
                    "acknowledgment",
                    models.BooleanField(
                        default=False, verbose_name="Do you acknowledge the above statement?"
                    ),
                ),
                (
                    "manufacture",
                    models.BooleanField(
                        null=True,
                        verbose_name="Was the firearm manufactured after 1899 and before 1939?",
                    ),
                ),
                (
                    "muzzle_loading",
                    models.BooleanField(null=True, verbose_name="Is the firearm muzzle-loading?"),
                ),
                (
                    "rimfire",
                    models.BooleanField(
                        null=True,
                        verbose_name="Is the firearm breech-loading capable of discharging a rimfire cartridge other than .22 inch, .23 inch, 6mm or 9mm?",
                    ),
                ),
                (
                    "rimfire_details",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="If Yes, please specify"
                    ),
                ),
                (
                    "ignition",
                    models.BooleanField(
                        null=True,
                        verbose_name="Is the firearm breech-loading using an ignition system other than rimfire or centrefire?",
                    ),
                ),
                (
                    "ignition_details",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Pin-fire", "Pin-fire"),
                            ("Needle-fire", "Needle-fire"),
                            ("Lip-fire", "Lip-fire"),
                            ("Cup primed", "Cup primed"),
                            ("Teat-fire", "Teat-fire"),
                            ("Base-fire", "Base-fire"),
                            ("Other", "Other"),
                        ],
                        max_length=12,
                        verbose_name="If Yes, please specify ignition system",
                    ),
                ),
                (
                    "ignition_other",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="If Other, please specify"
                    ),
                ),
                (
                    "chamber",
                    models.BooleanField(
                        help_text="32 bore, 24 bore, 14 bore, 10 bore (2 5/8 and 2 7/8 inch only), 8 bore, 4 bore, 3 bore, 2 bore, 1 1/8 bore, 1 1/2 bore, 1 1/4 bore",
                        null=True,
                        verbose_name="Is the firearm a shotgun, punt gun or rifle chambered for one of the following cartridges (expressed in imperial measurements)?",
                    ),
                ),
                (
                    "bore",
                    models.BooleanField(
                        null=True,
                        verbose_name="Is the firearm a shotgun, punt gun or rifle with a bore greater than 10?",
                    ),
                ),
                (
                    "bore_details",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="If Yes, please specify"
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="You no longer need to type the part of the Firearms Act that applies to the item listed in this box. You must select it from the 'Licence for' section.",
                        max_length=4096,
                    ),
                ),
                ("quantity", models.PositiveIntegerField(help_text="Enter a whole number")),
            ],
        ),
        migrations.CreateModel(
            name="SILSupplementaryInfo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_complete", models.BooleanField(default=False)),
                ("completed_datetime", models.DateTimeField(null=True)),
                (
                    "no_report_reason",
                    models.CharField(
                        max_length=1000,
                        null=True,
                        verbose_name="You haven't provided any reports on imported firearms. You must provide a reason why no reporting is required before you confirm reporting complete.",
                    ),
                ),
                (
                    "completed_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="web.user",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SILSupplementaryReport",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "transport",
                    models.CharField(
                        choices=[
                            ("air", "Air"),
                            ("rail", "Rail"),
                            ("road", "Road"),
                            ("sea", "Sea"),
                        ],
                        max_length=4,
                    ),
                ),
                ("date_received", models.DateField(verbose_name="Date Received")),
                ("created", models.DateTimeField(auto_now=True)),
                (
                    "bought_from",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="web.importcontact",
                    ),
                ),
                (
                    "supplementary_info",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reports",
                        to="web.silsupplementaryinfo",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TextilesChecklist",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "case_update",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Case update required from applicant?",
                    ),
                ),
                (
                    "fir_required",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Further information request required?",
                    ),
                ),
                (
                    "response_preparation",
                    models.BooleanField(
                        default=False,
                        verbose_name="Response Preparation - approve/refuse the request, edit details if necessary",
                    ),
                ),
                (
                    "validity_period_correct",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Validity period correct?",
                    ),
                ),
                (
                    "endorsements_listed",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Correct endorsements listed? Add/edit/remove as required (changes are automatically saved)",
                    ),
                ),
                (
                    "authorisation",
                    models.BooleanField(
                        default=False,
                        verbose_name="Authorisation - start authorisation (close case processing) to authorise the licence. Errors logged must be resolved.",
                    ),
                ),
                (
                    "within_maximum_amount_limit",
                    models.BooleanField(
                        default=False,
                        verbose_name="Check amount to be imported is within the maximum amount limits for the category and country requested.",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Unit",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("unit_type", models.CharField(max_length=20)),
                ("description", models.CharField(max_length=100)),
                ("short_description", models.CharField(max_length=30)),
                ("hmrc_code", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="WoodQuotaChecklist",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "case_update",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Case update required from applicant?",
                    ),
                ),
                (
                    "fir_required",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Further information request required?",
                    ),
                ),
                (
                    "response_preparation",
                    models.BooleanField(
                        default=False,
                        verbose_name="Response Preparation - approve/refuse the request, edit details if necessary",
                    ),
                ),
                (
                    "validity_period_correct",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Validity period correct?",
                    ),
                ),
                (
                    "endorsements_listed",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        max_length=3,
                        null=True,
                        verbose_name="Correct endorsements listed? Add/edit/remove as required (changes are automatically saved)",
                    ),
                ),
                (
                    "authorisation",
                    models.BooleanField(
                        default=False,
                        verbose_name="Authorisation - start authorisation (close case processing) to authorise the licence. Errors logged must be resolved.",
                    ),
                ),
                (
                    "sigl_wood_application_logged",
                    models.BooleanField(
                        default=False,
                        verbose_name="Log on to SIGL Wood via this screen. Processing done on SIGL Wood.",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AccessRequest",
            fields=[
                (
                    "process_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.process",
                    ),
                ),
                ("reference", models.CharField(max_length=100, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SUBMITTED", "Submitted"),
                            ("CLOSED", "Closed"),
                            ("FIR_REQUESTED", "Processing (FIR)"),
                        ],
                        default="SUBMITTED",
                        max_length=30,
                    ),
                ),
                ("organisation_name", models.CharField(max_length=100)),
                ("organisation_address", models.TextField()),
                (
                    "organisation_registered_number",
                    models.CharField(
                        blank=True, default="", max_length=100, verbose_name="Registered Number"
                    ),
                ),
                (
                    "request_reason",
                    models.TextField(
                        verbose_name="What are you importing and where are you importing it from?"
                    ),
                ),
                ("agent_name", models.CharField(blank=True, max_length=100, null=True)),
                ("agent_address", models.TextField(blank=True, default="")),
                ("submit_datetime", models.DateTimeField(auto_now=True)),
                ("last_update_datetime", models.DateTimeField(auto_now=True)),
                ("closed_datetime", models.DateTimeField(blank=True, null=True)),
                (
                    "response",
                    models.CharField(
                        choices=[("APPROVED", "Approved"), ("REFUSED", "Refused")],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("response_reason", models.TextField(blank=True, default="")),
            ],
            bases=(web.domains.workbasket.base.WorkbasketBase, "web.process"),
        ),
        migrations.CreateModel(
            name="ApprovalRequest",
            fields=[
                (
                    "process_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.process",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("DRAFT", "DRAFT"),
                            ("OPEN", "OPEN"),
                            ("CANCELLED", "CANCELLED"),
                            ("COMPLETED", "COMPLETED"),
                        ],
                        default="OPEN",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("request_date", models.DateTimeField(auto_now_add=True, null=True)),
                (
                    "response",
                    models.CharField(
                        blank=True,
                        choices=[("APPROVE", "Approve"), ("REFUSE", "Refuse")],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("response_date", models.DateTimeField(blank=True, null=True)),
                ("response_reason", models.CharField(blank=True, max_length=4000, null=True)),
            ],
            options={
                "ordering": ("-request_date",),
            },
            bases=(web.domains.workbasket.base.WorkbasketBase, "web.process"),
        ),
        migrations.CreateModel(
            name="DFLGoodsCertificate",
            fields=[
                (
                    "file_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.file",
                    ),
                ),
                (
                    "goods_description",
                    models.CharField(max_length=4096, verbose_name="Goods Description"),
                ),
                (
                    "deactivated_certificate_reference",
                    models.CharField(
                        max_length=50, verbose_name="Deactivated Certificate Reference"
                    ),
                ),
            ],
            bases=("web.file",),
        ),
        migrations.CreateModel(
            name="ExportApplication",
            fields=[
                (
                    "process_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.process",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("COMPLETED", "Completed"),
                            ("DELETED", "Deleted"),
                            ("IN_PROGRESS", "In Progress"),
                            ("PROCESSING", "Processing"),
                            ("REVOKED", "Revoked"),
                            ("STOPPED", "Stopped"),
                            ("SUBMITTED", "Submitted"),
                            ("VARIATION_REQUESTED", "Variation Requested"),
                            ("WITHDRAWN", "Withdrawn"),
                        ],
                        default="IN_PROGRESS",
                        max_length=30,
                    ),
                ),
                ("submit_datetime", models.DateTimeField(blank=True, null=True)),
                ("reference", models.CharField(blank=True, max_length=100, null=True, unique=True)),
                (
                    "decision",
                    models.CharField(
                        blank=True,
                        choices=[("APPROVE", "Approve"), ("REFUSE", "Refuse")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("refuse_reason", models.CharField(blank=True, max_length=4000, null=True)),
                ("acknowledged_datetime", models.DateTimeField(null=True)),
                ("last_update_datetime", models.DateTimeField(auto_now=True)),
                ("variation_no", models.IntegerField(default=0)),
            ],
            options={
                "abstract": False,
            },
            bases=(web.domains.workbasket.base.WorkbasketBase, "web.process"),
        ),
        migrations.CreateModel(
            name="FurtherInformationRequest",
            fields=[
                (
                    "process_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.process",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("CLOSED", "CLOSED"),
                            ("DELETED", "Deleted"),
                            ("OPEN", "Open"),
                            ("RESPONDED", "Responded"),
                        ],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                ("request_subject", models.CharField(max_length=100, null=True)),
                ("request_detail", models.TextField(null=True)),
                (
                    "email_cc_address_list",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.EmailField(max_length=254),
                        blank=True,
                        help_text="You may enter a list of email addresses to CC this email to. Use a comma (,) to seperate multiple addresses. E.g. john@smith.com,jane@smith.com",
                        null=True,
                        size=15,
                        verbose_name="Request CC Email Addresses",
                    ),
                ),
                (
                    "requested_datetime",
                    models.DateTimeField(auto_now_add=True, null=True, verbose_name="Request Date"),
                ),
                (
                    "response_detail",
                    models.CharField(max_length=4000, null=True, verbose_name="Response Detail"),
                ),
                ("response_datetime", models.DateTimeField(null=True)),
                ("closed_datetime", models.DateTimeField(null=True)),
                ("deleted_datetime", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "ordering": ["-requested_datetime"],
            },
            bases=(web.domains.workbasket.base.WorkbasketBase, "web.process"),
        ),
        migrations.CreateModel(
            name="GMPFile",
            fields=[
                (
                    "file_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.file",
                    ),
                ),
                (
                    "file_type",
                    models.CharField(
                        choices=[
                            ("ISO_22716", "ISO 22716"),
                            ("ISO_17021", "ISO 17021"),
                            ("ISO_17065", "ISO 17065"),
                            ("BRC_GSOCP", "BRC Global Standard for Consumer Products"),
                        ],
                        max_length=10,
                    ),
                ),
            ],
            bases=("web.file",),
        ),
        migrations.CreateModel(
            name="ImportApplication",
            fields=[
                (
                    "process_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.process",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("COMPLETED", "Completed"),
                            ("DELETED", "Deleted"),
                            ("IN_PROGRESS", "In Progress"),
                            ("PROCESSING", "Processing"),
                            ("REVOKED", "Revoked"),
                            ("STOPPED", "Stopped"),
                            ("SUBMITTED", "Submitted"),
                            ("VARIATION_REQUESTED", "Variation Requested"),
                            ("WITHDRAWN", "Withdrawn"),
                        ],
                        default="IN_PROGRESS",
                        max_length=30,
                    ),
                ),
                ("submit_datetime", models.DateTimeField(blank=True, null=True)),
                ("reference", models.CharField(blank=True, max_length=100, null=True, unique=True)),
                (
                    "decision",
                    models.CharField(
                        blank=True,
                        choices=[("APPROVE", "Approve"), ("REFUSE", "Refuse")],
                        max_length=10,
                        null=True,
                    ),
                ),
                ("refuse_reason", models.CharField(blank=True, max_length=4000, null=True)),
                ("acknowledged_datetime", models.DateTimeField(null=True)),
                (
                    "applicant_reference",
                    models.CharField(
                        blank=True,
                        help_text="Enter your own reference for this application.",
                        max_length=500,
                        null=True,
                        verbose_name="Applicant's Reference",
                    ),
                ),
                ("create_datetime", models.DateTimeField(auto_now_add=True)),
                ("variation_no", models.IntegerField(default=0)),
                ("legacy_case_flag", models.BooleanField(default=False)),
                (
                    "chief_usage_status",
                    models.CharField(
                        choices=[
                            ("C", "Cancelled"),
                            ("E", "Exhausted"),
                            ("D", "Expired"),
                            ("S", "S"),
                        ],
                        max_length=1,
                        null=True,
                    ),
                ),
                ("under_appeal_flag", models.BooleanField(default=False)),
                (
                    "variation_decision",
                    models.CharField(
                        blank=True,
                        choices=[("APPROVE", "Approve"), ("REFUSE", "Refuse")],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "variation_refuse_reason",
                    models.CharField(blank=True, max_length=4000, null=True),
                ),
                ("issue_date", models.DateField(blank=True, null=True)),
                ("licence_start_date", models.DateField(blank=True, null=True)),
                ("licence_end_date", models.DateField(blank=True, null=True)),
                ("licence_extended_flag", models.BooleanField(default=False)),
                ("last_update_datetime", models.DateTimeField(auto_now=True)),
                ("cover_letter", models.TextField(blank=True, null=True)),
                (
                    "issue_paper_licence_only",
                    models.BooleanField(null=True, verbose_name="Issue paper licence only?"),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(web.domains.workbasket.base.WorkbasketBase, "web.process"),
        ),
        migrations.CreateModel(
            name="IronSteelCertificateFile",
            fields=[
                (
                    "file_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.file",
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        help_text="Enter your reference including prefixes, in the format of four characters followed by eight digits, e.g. KZGB12345678.",
                        max_length=100,
                        verbose_name="Export Certificate Reference",
                    ),
                ),
                (
                    "total_qty",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="This is the total quantity allowed by the export licence.",
                        max_digits=9,
                        validators=[django.core.validators.MinValueValidator(limit_value=0.0)],
                        verbose_name="Total Quantity",
                    ),
                ),
                (
                    "requested_qty",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="This is the quantity that you will be importing against this export licence. These values must add up to the total import quantity.",
                        max_digits=9,
                        validators=[django.core.validators.MinValueValidator(limit_value=0.0)],
                        verbose_name="Requested Quantity",
                    ),
                ),
            ],
            bases=("web.file",),
        ),
        migrations.CreateModel(
            name="OutwardProcessingTradeFile",
            fields=[
                (
                    "file_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.file",
                    ),
                ),
                (
                    "file_type",
                    models.CharField(
                        choices=[
                            ("supporting_document", "Supporting Documents"),
                            ("fq_employment_decreased", "Statistics"),
                            ("fq_prior_authorisation", "Copy of Prior Authorisation"),
                            ("fq_past_beneficiary", "Justification"),
                            ("fq_new_application", "Justification"),
                            ("fq_further_authorisation", "Evidence/Past Correspondence"),
                            ("fq_subcontract_production", "Declaration from Subcontractor"),
                        ],
                        max_length=32,
                    ),
                ),
            ],
            bases=("web.file",),
        ),
        migrations.CreateModel(
            name="PriorSurveillanceContractFile",
            fields=[
                (
                    "file_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.file",
                    ),
                ),
                (
                    "file_type",
                    models.CharField(
                        choices=[
                            ("pro_forma_invoice", "Pro-forma Invoice"),
                            ("supply_contract", "Supply Contract"),
                        ],
                        max_length=32,
                    ),
                ),
            ],
            bases=("web.file",),
        ),
        migrations.CreateModel(
            name="SILUserSection5",
            fields=[
                (
                    "file_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.file",
                    ),
                ),
            ],
            bases=("web.file",),
        ),
        migrations.CreateModel(
            name="UserImportCertificate",
            fields=[
                (
                    "file_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.file",
                    ),
                ),
                (
                    "reference",
                    models.CharField(max_length=200, verbose_name="Certificate Reference"),
                ),
                (
                    "certificate_type",
                    models.CharField(
                        choices=[
                            ("firearms", "Firearms Certificate"),
                            ("registered", "Registered Firearms Dealer Certificate"),
                            ("shotgun", "Shotgun Certificate"),
                        ],
                        max_length=200,
                        verbose_name="Certificate Type",
                    ),
                ),
                ("date_issued", models.DateField(verbose_name="Date Issued")),
                ("expiry_date", models.DateField(verbose_name="Expiry Date")),
                ("updated_datetime", models.DateTimeField(auto_now=True)),
            ],
            bases=("web.file",),
        ),
        migrations.CreateModel(
            name="WoodContractFile",
            fields=[
                (
                    "file_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.file",
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        help_text="Enter the reference number of the contract/pre-contract between the importer and exporter.",
                        max_length=100,
                    ),
                ),
                (
                    "contract_date",
                    models.DateField(
                        help_text="Enter the date of the contract/pre-contract between the importer and exporter."
                    ),
                ),
            ],
            bases=("web.file",),
        ),
        migrations.CreateModel(
            name="WithdrawApplication",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "OPEN"),
                            ("rejected", "REJECTED"),
                            ("accepted", "ACCEPTED"),
                        ],
                        default="open",
                        max_length=10,
                    ),
                ),
                ("reason", models.TextField()),
                ("response", models.TextField()),
                ("created_datetime", models.DateTimeField(auto_now_add=True)),
                ("updated_datetime", models.DateTimeField(auto_now=True)),
                (
                    "request_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="+", to="web.user"
                    ),
                ),
                (
                    "response_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="web.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="VariationRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("OPEN", "Open"),
                            ("CANCELLED", "Cancelled"),
                            ("REJECTED", "Rejected"),
                            ("ACCEPTED", "Accepted"),
                            ("WITHDRAWN", "Withdrawn"),
                            ("DELETED", "Deleted"),
                            ("CLOSED", "Closed"),
                        ],
                        max_length=30,
                    ),
                ),
                ("extension_flag", models.BooleanField(default=False)),
                ("requested_datetime", models.DateTimeField(auto_now_add=True, null=True)),
                ("what_varied", models.CharField(blank=True, max_length=4000, null=True)),
                ("why_varied", models.CharField(blank=True, max_length=4000, null=True)),
                ("when_varied", models.DateField(blank=True, null=True)),
                ("reject_reason", models.CharField(blank=True, max_length=4000, null=True)),
                ("closed_datetime", models.DateTimeField(blank=True, null=True)),
                (
                    "closed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="closed_variations",
                        to="web.user",
                    ),
                ),
                (
                    "requested_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="requested_variations",
                        to="web.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Usage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("start_date", models.DateField()),
                ("end_date", models.DateField(blank=True, null=True)),
                ("maximum_allocation", models.IntegerField(blank=True, null=True)),
                (
                    "application_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="web.importapplicationtype"
                    ),
                ),
                (
                    "commodity_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="usages",
                        to="web.commoditygroup",
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="web.country"
                    ),
                ),
            ],
            options={
                "ordering": ("application_type", "country", "start_date"),
            },
        ),
        migrations.CreateModel(
            name="UpdateRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("OPEN", "Open"),
                            ("CLOSED", "Closed"),
                            ("UPDATE_IN_PROGRESS", "Update in Progress"),
                            ("RESPONDED", "Responded"),
                            ("DELETED", "Deleted"),
                        ],
                        max_length=30,
                    ),
                ),
                ("request_subject", models.CharField(max_length=100, null=True)),
                ("request_detail", models.TextField(null=True)),
                (
                    "email_cc_address_list",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.EmailField(max_length=254),
                        blank=True,
                        help_text="You may enter a list of email addresses to CC this email to. Use a comma (,) to seperate multiple addresses. E.g. john@smith.com,jane@smith.com",
                        null=True,
                        size=15,
                        verbose_name="Request CC Email Addresses",
                    ),
                ),
                (
                    "response_detail",
                    models.TextField(
                        help_text="Please enter a summary of the updates made",
                        null=True,
                        verbose_name="Summary of Changes",
                    ),
                ),
                ("request_datetime", models.DateTimeField(null=True)),
                ("response_datetime", models.DateTimeField(blank=True, null=True)),
                ("closed_datetime", models.DateTimeField(blank=True, null=True)),
                (
                    "closed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="web.user",
                    ),
                ),
                (
                    "requested_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="web.user",
                    ),
                ),
                (
                    "response_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="web.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Template",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("start_datetime", models.DateTimeField(auto_now_add=True)),
                ("end_datetime", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("template_name", models.CharField(max_length=100)),
                ("template_code", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("ENDORSEMENT", "Endorsement"),
                            ("LETTER_TEMPLATE", "Letter template"),
                            ("EMAIL_TEMPLATE", "Email template"),
                            ("CFS_TRANSLATION", "CFS translation"),
                            ("DECLARATION", "Declaration"),
                            ("CFS_SCHEDULE", "CFS schedule"),
                            ("LETTER_FRAGMENT", "Letter fragment"),
                            ("CFS_DECLARATION_TRANSLATION", "CFS declaration translation"),
                            ("CFS_SCHEDULE_TRANSLATION", "CFS schedule translation"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "application_domain",
                    models.CharField(
                        choices=[
                            ("CA", "Certificate Applications"),
                            ("IMA", "Import Applications"),
                            ("IAR", "Access Requests"),
                        ],
                        max_length=20,
                    ),
                ),
                ("template_title", models.CharField(max_length=4000, null=True)),
                ("template_content", models.TextField(null=True)),
                ("countries", models.ManyToManyField(to="web.Country")),
                (
                    "country_translation_set",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="web.countrytranslationset",
                    ),
                ),
            ],
            options={
                "ordering": ("-is_active", "template_name"),
            },
            bases=(web.models.mixins.Archivable, models.Model),
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("prepare", "Prepare"),
                            ("process", "Process"),
                            ("authorise", "Authorise"),
                            ("chief_wait", "CHIEF_WAIT"),
                            ("chief_error", "CHIEF_ERROR"),
                            ("acknowledge", "Acknowledge"),
                        ],
                        max_length=30,
                    ),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("finished", models.DateTimeField(blank=True, null=True)),
                (
                    "owner",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="web.user",
                    ),
                ),
                (
                    "previous",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="next",
                        to="web.task",
                    ),
                ),
                (
                    "process",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="web.process",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SILSupplementaryReportFirearm",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("serial_number", models.CharField(max_length=100, null=True)),
                ("calibre", models.CharField(max_length=100, null=True)),
                (
                    "model",
                    models.CharField(max_length=100, null=True, verbose_name="Make and Model"),
                ),
                (
                    "proofing",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        default=None,
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="firearms",
                        to="web.silsupplementaryreport",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Section5Clause",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("clause", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("is_active", models.BooleanField(default=True)),
                ("created_datetime", models.DateTimeField(auto_now_add=True)),
                ("updated_datetime", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="+", to="web.user"
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="web.user",
                    ),
                ),
            ],
            options={
                "ordering": ("clause",),
            },
            bases=(web.models.mixins.Archivable, models.Model),
        ),
        migrations.CreateModel(
            name="Section5Authority",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "reference",
                    models.CharField(
                        help_text="Section 5 Authority reference. Example format: '14/A/D/0001'.",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("postcode", models.CharField(blank=True, max_length=30, null=True)),
                ("address", models.CharField(max_length=300, null=True)),
                ("address_entry_type", models.CharField(max_length=10, null=True)),
                ("start_date", models.DateField(null=True)),
                ("end_date", models.DateField(null=True)),
                ("further_details", models.CharField(blank=True, max_length=4000, null=True)),
                (
                    "clauses",
                    models.ManyToManyField(through="web.ClauseQuantity", to="web.Section5Clause"),
                ),
                ("files", models.ManyToManyField(to="web.File")),
                (
                    "importer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="section5_authorities",
                        to="web.importer",
                    ),
                ),
                ("linked_offices", models.ManyToManyField(to="web.Office")),
            ],
        ),
        migrations.CreateModel(
            name="SanctionsAndAdhocApplicationGoods",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "goods_description",
                    models.CharField(max_length=4096, verbose_name="Goods Description"),
                ),
                (
                    "quantity_amount",
                    models.DecimalField(decimal_places=2, max_digits=9, verbose_name="Quantity"),
                ),
                (
                    "value",
                    models.DecimalField(
                        decimal_places=2, max_digits=9, verbose_name="Value (GBP CIF)"
                    ),
                ),
                (
                    "commodity",
                    models.ForeignKey(
                        help_text="It is the responsibility of the applicant to ensure that the commodity code in this box is correct. If you are unsure of the correct commodity code, consult the HM Revenue and Customs Integrated Tariff Book, Volume 2, which is available from the Stationery Office. If you are still in doubt, contact the Classification Advisory Service on (01702) 366077.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="web.commodity",
                        verbose_name="Commodity Code",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PhoneNumber",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("phone", models.CharField(max_length=60)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("WORK", "Work"),
                            ("FAX", "Fax"),
                            ("MOBILE", "Mobile"),
                            ("HOME", "Home"),
                            ("MINICOM", "Minicom"),
                        ],
                        default="WORK",
                        max_length=30,
                    ),
                ),
                ("comment", models.CharField(blank=True, max_length=4000, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="phone_numbers",
                        to="web.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PersonalEmail",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                (
                    "type",
                    models.CharField(
                        choices=[("WORK", "Work"), ("HOME", "Home")], default="WORK", max_length=30
                    ),
                ),
                ("portal_notifications", models.BooleanField(default=False)),
                ("comment", models.CharField(blank=True, max_length=4000, null=True)),
                ("is_primary", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="personal_emails",
                        to="web.user",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OILSupplementaryReportFirearm",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("serial_number", models.CharField(max_length=100, null=True)),
                ("calibre", models.CharField(max_length=100, null=True)),
                (
                    "model",
                    models.CharField(max_length=100, null=True, verbose_name="Make and Model"),
                ),
                (
                    "proofing",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        default=None,
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="firearms",
                        to="web.oilsupplementaryreport",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ObsoleteCalibre",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("is_active", models.BooleanField(default=True)),
                ("order", models.IntegerField()),
                (
                    "calibre_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="calibres",
                        to="web.obsoletecalibregroup",
                    ),
                ),
            ],
            options={
                "ordering": ("order",),
            },
            bases=(web.models.mixins.Archivable, models.Model),
        ),
        migrations.CreateModel(
            name="Mailshot",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("status", models.CharField(default="DRAFT", max_length=20)),
                ("title", models.CharField(max_length=200, null=True)),
                ("description", models.CharField(max_length=4000, null=True)),
                ("is_email", models.BooleanField(default=True)),
                ("email_subject", models.CharField(max_length=78, null=True)),
                ("email_body", models.CharField(max_length=4000, null=True)),
                ("is_retraction_email", models.BooleanField(default=True)),
                ("retract_email_subject", models.CharField(max_length=78, null=True)),
                ("retract_email_body", models.CharField(max_length=4000, null=True)),
                ("is_to_importers", models.BooleanField(default=False)),
                ("is_to_exporters", models.BooleanField(default=False)),
                ("create_datetime", models.DateTimeField(auto_now_add=True)),
                ("published_datetime", models.DateTimeField(null=True)),
                ("retracted_datetime", models.DateTimeField(null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_mailshots",
                        to="web.user",
                    ),
                ),
                ("files", models.ManyToManyField(to="web.File")),
                (
                    "published_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="published_mailshots",
                        to="web.user",
                    ),
                ),
                (
                    "retracted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="retracted_mailshots",
                        to="web.user",
                    ),
                ),
            ],
            options={
                "ordering": ("-id",),
            },
        ),
        migrations.AddField(
            model_name="importer",
            name="offices",
            field=models.ManyToManyField(to="web.Office"),
        ),
        migrations.AddField(
            model_name="importer",
            name="user",
            field=models.ForeignKey(
                help_text="Search a user to link. Users returned are matched against first/last name, email and title.",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="own_importers",
                to="web.user",
                verbose_name="Person",
            ),
        ),
        migrations.AddField(
            model_name="importapplicationtype",
            name="declaration_template",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="declaration_application_types",
                to="web.template",
            ),
        ),
        migrations.AddField(
            model_name="importapplicationtype",
            name="default_commodity_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="web.commoditygroup",
            ),
        ),
        migrations.AddField(
            model_name="importapplicationtype",
            name="endorsements",
            field=models.ManyToManyField(
                related_name="endorsement_application_types", to="web.Template"
            ),
        ),
        migrations.AddField(
            model_name="importapplicationtype",
            name="master_country_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="import_application_types",
                to="web.countrygroup",
            ),
        ),
        migrations.AddField(
            model_name="importapplicationtype",
            name="origin_country_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="import_application_types_from",
                to="web.countrygroup",
            ),
        ),
        migrations.CreateModel(
            name="FirearmsAuthority",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("reference", models.CharField(max_length=100, null=True)),
                (
                    "certificate_type",
                    models.CharField(
                        choices=[
                            ("DEACTIVATED", "Deactivation Certificate"),
                            ("FIREARMS", "Firearms Certificate"),
                            ("RFD", "Registered Firearms Dealer Certificate"),
                            ("SHOTGUN", "Shotgun Certificate"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("postcode", models.CharField(blank=True, max_length=30, null=True)),
                ("address", models.CharField(max_length=300, null=True)),
                ("address_entry_type", models.CharField(max_length=10, null=True)),
                ("start_date", models.DateField(null=True)),
                ("end_date", models.DateField(null=True)),
                ("further_details", models.CharField(blank=True, max_length=4000, null=True)),
                ("files", models.ManyToManyField(to="web.File")),
                (
                    "importer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="firearms_authorities",
                        to="web.importer",
                    ),
                ),
                (
                    "issuing_constabulary",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="web.constabulary",
                    ),
                ),
                ("linked_offices", models.ManyToManyField(to="web.Office")),
            ],
        ),
        migrations.CreateModel(
            name="FirearmsAct",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("act", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("is_active", models.BooleanField(default=True)),
                ("created_datetime", models.DateTimeField(auto_now_add=True)),
                ("updated_datetime", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="+", to="web.user"
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="web.user",
                    ),
                ),
            ],
            options={
                "ordering": ("act",),
            },
            bases=(web.models.mixins.Archivable, models.Model),
        ),
        migrations.CreateModel(
            name="Exporter",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("name", models.TextField(verbose_name="Organisation Name")),
                (
                    "registered_number",
                    models.CharField(
                        blank=True, max_length=15, null=True, verbose_name="Registered Number"
                    ),
                ),
                ("comments", models.TextField(blank=True, null=True)),
                (
                    "main_exporter",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="agents",
                        to="web.exporter",
                    ),
                ),
                ("offices", models.ManyToManyField(to="web.Office")),
            ],
            options={
                "ordering": ("-is_active", "name"),
                "permissions": [
                    ("is_contact_of_exporter", "Is contact of this exporter"),
                    ("is_agent_of_exporter", "Is agent of this exporter"),
                ],
            },
            bases=(web.models.mixins.Archivable, models.Model),
        ),
        migrations.CreateModel(
            name="ExportApplicationType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "type_code",
                    models.CharField(
                        choices=[
                            ("CFS", "Certificate of Free Sale"),
                            ("COM", "Certificate of Manufacture"),
                            ("GMP", "Certificate of Good Manufacturing Practice"),
                        ],
                        max_length=30,
                        unique=True,
                    ),
                ),
                ("type", models.CharField(max_length=70)),
                ("allow_multiple_products", models.BooleanField()),
                ("generate_cover_letter", models.BooleanField()),
                ("allow_hse_authorization", models.BooleanField()),
                (
                    "country_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="web.countrygroup"
                    ),
                ),
                (
                    "country_group_for_manufacture",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="manufacture_export_application_types",
                        to="web.countrygroup",
                    ),
                ),
            ],
            options={
                "ordering": ("type",),
            },
        ),
        migrations.CreateModel(
            name="EndorsementUsage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "application_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to="web.importapplicationtype",
                    ),
                ),
                ("linked_endorsements", models.ManyToManyField(to="web.Template")),
            ],
            options={
                "ordering": ("application_type__type",),
            },
        ),
        migrations.CreateModel(
            name="DFLSupplementaryReportFirearm",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("serial_number", models.CharField(max_length=100, null=True)),
                ("calibre", models.CharField(max_length=100, null=True)),
                (
                    "model",
                    models.CharField(max_length=100, null=True, verbose_name="Make and Model"),
                ),
                (
                    "proofing",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        default=None,
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="firearms",
                        to="web.dflsupplementaryreport",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="dflsupplementaryreport",
            name="bought_from",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="web.importcontact",
            ),
        ),
        migrations.AddField(
            model_name="dflsupplementaryreport",
            name="supplementary_info",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="reports",
                to="web.dflsupplementaryinfo",
            ),
        ),
        migrations.CreateModel(
            name="CountryTranslation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("translation", models.CharField(max_length=150)),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="web.country"
                    ),
                ),
                (
                    "translation_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="web.countrytranslationset"
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="country",
            constraint=models.UniqueConstraint(
                fields=("name", "is_active"), name="country_group_unique"
            ),
        ),
        migrations.AddField(
            model_name="commoditygroup",
            name="commodities",
            field=models.ManyToManyField(blank=True, to="web.Commodity"),
        ),
        migrations.AddField(
            model_name="commoditygroup",
            name="commodity_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="web.commoditytype",
            ),
        ),
        migrations.AddField(
            model_name="commoditygroup",
            name="unit",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="web.unit"
            ),
        ),
        migrations.AddField(
            model_name="commodity",
            name="commodity_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="web.commoditytype"
            ),
        ),
        migrations.AddField(
            model_name="clausequantity",
            name="section5authority",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="web.section5authority"
            ),
        ),
        migrations.AddField(
            model_name="clausequantity",
            name="section5clause",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="web.section5clause"
            ),
        ),
        migrations.AddField(
            model_name="cfsscheduleparagraph",
            name="template",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="paragraphs",
                to="web.template",
            ),
        ),
        migrations.AddField(
            model_name="cfsschedule",
            name="country_of_manufacture",
            field=models.ForeignKey(
                help_text="You can only list one country. Add another schedule if product information differs.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.country",
                verbose_name="Country Of Manufacture",
            ),
        ),
        migrations.AddField(
            model_name="cfsschedule",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, related_name="+", to="web.user"
            ),
        ),
        migrations.AddField(
            model_name="cfsschedule",
            name="legislations",
            field=models.ManyToManyField(
                help_text="Enter legislation relevant to the products on this schedule. A maximum of 3 pieces of legislation may be added per schedule. If you cannot find relevant legislation, please contact DIT, enquiries.ilb@trade.gsi.gov.uk, to request to have it added.",
                to="web.ProductLegislation",
                verbose_name="Legislation",
            ),
        ),
        migrations.AddField(
            model_name="cfsproducttype",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="product_type_numbers",
                to="web.cfsproduct",
            ),
        ),
        migrations.AddField(
            model_name="cfsproductactiveingredient",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="active_ingredients",
                to="web.cfsproduct",
            ),
        ),
        migrations.AddField(
            model_name="cfsproduct",
            name="schedule",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="products",
                to="web.cfsschedule",
            ),
        ),
        migrations.AddConstraint(
            model_name="casereference",
            constraint=models.UniqueConstraint(
                fields=("prefix", "year", "reference"), name="reference_unique"
            ),
        ),
        migrations.AddField(
            model_name="casenote",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="created_import_case_notes",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="casenote",
            name="files",
            field=models.ManyToManyField(to="web.File"),
        ),
        migrations.AddField(
            model_name="caseemail",
            name="attachments",
            field=models.ManyToManyField(to="web.File"),
        ),
        migrations.AddField(
            model_name="alternativeemail",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="alternative_emails",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="actquantity",
            name="firearmsact",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="web.firearmsact"
            ),
        ),
        migrations.AddField(
            model_name="actquantity",
            name="firearmsauthority",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="web.firearmsauthority"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="account_status_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="users_changed",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.CreateModel(
            name="CertificateOfFreeSaleApplication",
            fields=[
                (
                    "exportapplication_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.exportapplication",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("web.exportapplication",),
        ),
        migrations.CreateModel(
            name="CertificateOfGoodManufacturingPracticeApplication",
            fields=[
                (
                    "exportapplication_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.exportapplication",
                    ),
                ),
                (
                    "is_responsible_person",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        default=None,
                        max_length=3,
                        null=True,
                        verbose_name="Are you the responsible person as defined by Cosmetic Products Legislation as applicable in GB or NI?",
                    ),
                ),
                (
                    "responsible_person_name",
                    models.CharField(max_length=200, null=True, verbose_name="Name"),
                ),
                (
                    "responsible_person_address_entry_type",
                    models.CharField(
                        choices=[("M", "Manual"), ("S", "Search")],
                        default="M",
                        max_length=10,
                        verbose_name="Address Type",
                    ),
                ),
                (
                    "responsible_person_postcode",
                    models.CharField(max_length=30, null=True, verbose_name="Postcode"),
                ),
                (
                    "responsible_person_address",
                    models.CharField(max_length=4000, null=True, verbose_name="Address"),
                ),
                (
                    "responsible_person_country",
                    models.CharField(
                        choices=[("GB", "Great Britain"), ("NIR", "Northern Ireland")],
                        default=None,
                        max_length=3,
                        null=True,
                        verbose_name="Country of Responsible Person",
                    ),
                ),
                (
                    "is_manufacturer",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        default=None,
                        max_length=3,
                        null=True,
                        verbose_name="Are you the manufacturer of the cosmetic products?",
                    ),
                ),
                (
                    "manufacturer_name",
                    models.CharField(max_length=200, null=True, verbose_name="Name"),
                ),
                (
                    "manufacturer_address_entry_type",
                    models.CharField(
                        choices=[("M", "Manual"), ("S", "Search")],
                        default="M",
                        max_length=10,
                        verbose_name="Address Type",
                    ),
                ),
                (
                    "manufacturer_postcode",
                    models.CharField(max_length=30, null=True, verbose_name="Postcode"),
                ),
                (
                    "manufacturer_address",
                    models.CharField(max_length=4000, null=True, verbose_name="Address"),
                ),
                (
                    "manufacturer_country",
                    models.CharField(
                        choices=[("GB", "Great Britain"), ("NIR", "Northern Ireland")],
                        default=None,
                        max_length=3,
                        null=True,
                        verbose_name="Country of Manufacture",
                    ),
                ),
                (
                    "gmp_certificate_issued",
                    models.CharField(
                        choices=[
                            ("ISO_22716", "ISO 22716"),
                            ("BRC_GSOCP", "BRC Global Standard for Consumer Products"),
                        ],
                        default=None,
                        max_length=10,
                        null=True,
                        verbose_name="Which valid certificate of Good Manufacturing Practice (GMP) has your cosmetics manufacturer been issued with?",
                    ),
                ),
                (
                    "auditor_accredited",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        default=None,
                        max_length=3,
                        null=True,
                        verbose_name="Is the auditor or auditing body who inspected and certified the manufacturing facility accredited according to ISO 17021 by a national accreditation body which is a member of the International Accreditation Forum?",
                    ),
                ),
                (
                    "auditor_certified",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        default=None,
                        max_length=3,
                        null=True,
                        verbose_name="Is the auditor or auditing body who inspected and certified the manufacturing facility accredited according to ISO 17065 by a national accreditation body which is a member of the International Accreditation Forum?",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("web.exportapplication",),
        ),
        migrations.CreateModel(
            name="CertificateOfManufactureApplication",
            fields=[
                (
                    "exportapplication_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.exportapplication",
                    ),
                ),
                ("is_pesticide_on_free_sale_uk", models.BooleanField(null=True)),
                ("is_manufacturer", models.BooleanField(null=True)),
                ("product_name", models.CharField(max_length=1000)),
                ("chemical_name", models.CharField(max_length=500)),
                ("manufacturing_process", models.TextField(max_length=4000)),
            ],
            options={
                "abstract": False,
            },
            bases=("web.exportapplication",),
        ),
        migrations.CreateModel(
            name="DerogationsApplication",
            fields=[
                (
                    "importapplication_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.importapplication",
                    ),
                ),
                (
                    "contract_sign_date",
                    models.DateField(null=True, verbose_name="Contract Sign Date"),
                ),
                (
                    "contract_completion_date",
                    models.DateField(null=True, verbose_name="Contract Completion Date"),
                ),
                (
                    "explanation",
                    models.CharField(
                        max_length=4096,
                        null=True,
                        verbose_name="Provide details of why this is a pre-existing contract",
                    ),
                ),
                (
                    "goods_description",
                    models.CharField(
                        help_text="Details of the goods that are subject to the contract notification",
                        max_length=4096,
                        null=True,
                        verbose_name="Goods Description",
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=9,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(limit_value=0.0)],
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        choices=[("kilos", "kilos")], max_length=40, null=True, verbose_name="Unit"
                    ),
                ),
                (
                    "value",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=9,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(limit_value=0.0)],
                        verbose_name="Value (euro CIF)",
                    ),
                ),
                (
                    "entity_consulted_name",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Provide the name of the person, entity or body designated by the Syrian National Coalition for Opposition and Revolutionary Forces that was consulted",
                    ),
                ),
                (
                    "activity_benefit_anyone",
                    models.CharField(
                        blank=True,
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=3,
                        null=True,
                        verbose_name="Do the activities concerned benefit anyone listed in Article 2 of EU Regulations 2580/2001 and 881/2002 or Article 14 of EU Regulation 36/2012?",
                    ),
                ),
                (
                    "purpose_of_request",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("HC", "Humanitarian concerns"),
                            ("POS", "Assisting in the provision of basic services"),
                            ("REA", "Reconstruction or restoring economic activity"),
                            ("OCP", "Other civilian purposes"),
                        ],
                        max_length=3,
                        null=True,
                        verbose_name="Purpose of the request and how it provides assistance to the Syrian civilian population",
                    ),
                ),
                (
                    "civilian_purpose_details",
                    models.CharField(
                        blank=True,
                        max_length=4096,
                        null=True,
                        verbose_name="Provide details of the civilian purpose",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("web.importapplication",),
        ),
        migrations.CreateModel(
            name="DFLApplication",
            fields=[
                (
                    "importapplication_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.importapplication",
                    ),
                ),
                (
                    "deactivated_firearm",
                    models.BooleanField(default=True, verbose_name="Deactivated Firearm"),
                ),
                ("proof_checked", models.BooleanField(default=False, verbose_name="Proof Checked")),
                (
                    "commodity_code",
                    models.CharField(
                        choices=[
                            ("ex Chapter 93", "ex Chapter 93"),
                            ("ex Chapter 97", "ex Chapter 97"),
                        ],
                        help_text='You must pick the commodity code group that applies to the items that you wish to import. Please note that "ex Chapter 97" is only relevant to collectors pieces and items over 100 years old. Please contact HMRC classification advisory service, 01702 366077, if you are unsure of the correct code.',
                        max_length=40,
                        null=True,
                        verbose_name="Commodity Code",
                    ),
                ),
                (
                    "know_bought_from",
                    models.BooleanField(
                        null=True,
                        verbose_name="Do you know who you plan to buy/obtain these items from?",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("web.importapplication",),
        ),
        migrations.CreateModel(
            name="ExporterAccessRequest",
            fields=[
                (
                    "accessrequest_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.accessrequest",
                    ),
                ),
                (
                    "request_type",
                    models.CharField(
                        choices=[
                            ("MAIN_EXPORTER_ACCESS", "Request access to act as an Exporter"),
                            (
                                "AGENT_EXPORTER_ACCESS",
                                "Request access to act as an Agent for an Exporter",
                            ),
                        ],
                        max_length=30,
                        verbose_name="Access Request Type",
                    ),
                ),
            ],
            bases=("web.accessrequest",),
        ),
        migrations.CreateModel(
            name="ExporterApprovalRequest",
            fields=[
                (
                    "approvalrequest_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.approvalrequest",
                    ),
                ),
            ],
            bases=("web.approvalrequest",),
        ),
        migrations.CreateModel(
            name="ImporterAccessRequest",
            fields=[
                (
                    "accessrequest_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.accessrequest",
                    ),
                ),
                (
                    "eori_number",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="EORI number should include the GB prefix for organisation or GBPR for individual",
                        max_length=20,
                        verbose_name="EORI Number",
                    ),
                ),
                (
                    "eori_number_ni",
                    models.CharField(
                        blank=True, default="", max_length=20, verbose_name="NI EORI Number"
                    ),
                ),
                (
                    "request_type",
                    models.CharField(
                        choices=[
                            ("MAIN_IMPORTER_ACCESS", "Request access to act as an Importer"),
                            (
                                "AGENT_IMPORTER_ACCESS",
                                "Request access to act as an Agent for an Importer",
                            ),
                        ],
                        max_length=30,
                        verbose_name="Access Request Type",
                    ),
                ),
            ],
            bases=("web.accessrequest",),
        ),
        migrations.CreateModel(
            name="ImporterApprovalRequest",
            fields=[
                (
                    "approvalrequest_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.approvalrequest",
                    ),
                ),
            ],
            bases=("web.approvalrequest",),
        ),
        migrations.CreateModel(
            name="IronSteelApplication",
            fields=[
                (
                    "importapplication_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.importapplication",
                    ),
                ),
                (
                    "goods_cleared",
                    models.BooleanField(
                        help_text="If yes, a paper licence will be issued.",
                        null=True,
                        verbose_name="Will the goods be cleared in another Member State of the European Union?",
                    ),
                ),
                (
                    "shipping_year",
                    models.PositiveSmallIntegerField(
                        help_text="Date of shipment should be as shown on your export licence or other export document issued by the exporting country for goods covered by this application. The goods must be exported by 31 December. Shipment is considered to have taken place when the goods are loaded onto the exporting aircraft, vehicle or vessel.",
                        null=True,
                        verbose_name="Shipping Year",
                    ),
                ),
                (
                    "goods_description",
                    models.CharField(
                        help_text="Please describe the goods in no more than five (5) words.",
                        max_length=100,
                        null=True,
                        verbose_name="Goods Description",
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=9,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(limit_value=0.0)],
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("web.importapplication",),
        ),
        migrations.CreateModel(
            name="OpenIndividualLicenceApplication",
            fields=[
                (
                    "importapplication_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.importapplication",
                    ),
                ),
                ("section1", models.BooleanField(default=True, verbose_name="Section 1")),
                ("section2", models.BooleanField(default=True, verbose_name="Section 2")),
                ("know_bought_from", models.BooleanField(null=True)),
                (
                    "commodity_code",
                    models.CharField(
                        choices=[
                            ("ex Chapter 93", "ex Chapter 93"),
                            ("ex Chapter 97", "ex Chapter 97"),
                        ],
                        help_text='You must pick the commodity code group that applies to the items that you wish to import. Please note that "ex Chapter 97" is only relevant to collectors pieces and items over 100 years old. Please contact HMRC classification advisory service, 01702 366077, if you are unsure of the correct code.',
                        max_length=40,
                        null=True,
                        verbose_name="Commodity Code",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("web.importapplication",),
        ),
        migrations.CreateModel(
            name="OutwardProcessingTradeApplication",
            fields=[
                (
                    "importapplication_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.importapplication",
                    ),
                ),
                (
                    "customs_office_name",
                    models.CharField(
                        max_length=100,
                        null=True,
                        verbose_name="Requested customs supervising office name",
                    ),
                ),
                (
                    "customs_office_address",
                    models.TextField(
                        max_length=4000,
                        null=True,
                        verbose_name="Requested customs supervising office address",
                    ),
                ),
                (
                    "rate_of_yield",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=9,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(limit_value=0.0)],
                        verbose_name="Rate of yield (kg per garment)",
                    ),
                ),
                (
                    "rate_of_yield_calc_method",
                    models.TextField(
                        blank=True,
                        max_length=4000,
                        null=True,
                        verbose_name="Rate of yield calculation method",
                    ),
                ),
                (
                    "last_export_day",
                    models.DateField(
                        help_text="Requested last day of authorised exportation.",
                        null=True,
                        verbose_name="Last Export Day",
                    ),
                ),
                (
                    "reimport_period",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=9,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(limit_value=0.0)],
                        verbose_name="Period for re-importation (months)",
                    ),
                ),
                (
                    "nature_process_ops",
                    models.TextField(
                        max_length=4000, null=True, verbose_name="Nature of processing operations"
                    ),
                ),
                (
                    "suggested_id",
                    models.TextField(
                        help_text="Enter the suggested means of identification of re-imported compensating products.",
                        max_length=4000,
                        null=True,
                        verbose_name="Suggested means of identification",
                    ),
                ),
                (
                    "cp_category",
                    models.CharField(
                        choices=[
                            ("4", "4"),
                            ("5", "5"),
                            ("6", "6"),
                            ("7", "7"),
                            ("8", "8"),
                            ("15", "15"),
                            ("21", "21"),
                            ("24", "24"),
                            ("26", "26"),
                            ("27", "27"),
                            ("29", "29"),
                            ("73", "73"),
                        ],
                        help_text="The category defines what commodities you are applying to import.",
                        max_length=2,
                        null=True,
                        verbose_name="Category",
                    ),
                ),
                (
                    "cp_category_licence_description",
                    models.CharField(
                        help_text="By default, this is the category description. You may need to alter the description to a shorter form in order for it to display correctly on the licence.",
                        max_length=4000,
                        null=True,
                        verbose_name="Category Description",
                    ),
                ),
                (
                    "cp_total_quantity",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Please note that maximum allocations apply. Please check the guidance to ensure that you do not apply for more than is allowable.",
                        max_digits=9,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(limit_value=0.0)],
                        verbose_name="Total Quantity",
                    ),
                ),
                (
                    "cp_total_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Value of processing of the fabric/yarn",
                        max_digits=9,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(limit_value=0.0)],
                        verbose_name="Total Value (Euro)",
                    ),
                ),
                (
                    "teg_total_quantity",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=9,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(limit_value=0.0)],
                        verbose_name="Total Quantity",
                    ),
                ),
                (
                    "teg_total_value",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=9,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(limit_value=0.0)],
                        verbose_name="Total Value (Euro)",
                    ),
                ),
                (
                    "teg_goods_description",
                    models.CharField(max_length=4096, null=True, verbose_name="Goods Description"),
                ),
                (
                    "fq_similar_to_own_factory",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        help_text="This question only needs to be completed once per year. If you have already completed this question on a previous application this year, you may select 'N/A'.",
                        max_length=3,
                        null=True,
                        verbose_name="Do you manufacture goods which are similar to and at the same stage of processing in your own factory within the EU as the products to be re-imported? (Article 2 (2) (a) of Regulation (EC) No. 3036/94)",
                    ),
                ),
                (
                    "fq_manufacturing_within_eu",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        help_text="This question only needs to be completed once per year. If you have already completed this question on a previous application this year, you may select 'N/A'.",
                        max_length=3,
                        null=True,
                        verbose_name="Are the main manufacturing processes of the similar goods performed in your own factory within the EU (i.e. sewing and assembly or knitting in the case of fully-fashioned garments obtained from yarn)? (Article 2 (2) (a) of Regulation (EC) No. 3036/94)",
                    ),
                ),
                (
                    "fq_maintained_in_eu",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        help_text="This question only needs to be completed once per year. If you have already completed this question on a previous application this year, you may select 'N/A'.",
                        max_length=3,
                        null=True,
                        verbose_name="Have you maintained your textile manufacturing activity in the EU with respect to the nature of the products and their quantities? (Article 3 (3) of Regulation (EC) No. 3036/94)",
                    ),
                ),
                (
                    "fq_maintained_in_eu_reasons",
                    models.CharField(
                        blank=True,
                        max_length=4000,
                        null=True,
                        verbose_name="If not, please indicate reasons for the above or make reference to past correspondence.",
                    ),
                ),
                (
                    "fq_employment_decreased",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        help_text="This question only needs to be completed once per year. If you have already completed this question on a previous application this year, you may select 'N/A'.",
                        max_length=3,
                        null=True,
                        verbose_name="Has your level of employment decreased? (Article 5 (4) of Regulation (EC) No. 3036/94)",
                    ),
                ),
                (
                    "fq_employment_decreased_reasons",
                    models.CharField(
                        blank=True,
                        max_length=4000,
                        null=True,
                        verbose_name="If so, please indicate reasons and attach statistics below if necessary, or make reference to past correspondence.",
                    ),
                ),
                (
                    "fq_prior_authorisation",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=3,
                        null=True,
                        verbose_name="Have you applied for a prior authorisation in another Member State for the same quota period? (Article 3(4) or (5) of Regulation (EC) No. 3036/94)",
                    ),
                ),
                (
                    "fq_prior_authorisation_reasons",
                    models.CharField(
                        blank=True,
                        max_length=4000,
                        null=True,
                        verbose_name="If so, please attach a copy of your authorisation below, or make reference to past correspondence.",
                    ),
                ),
                (
                    "fq_past_beneficiary",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=3,
                        null=True,
                        verbose_name="Are you applying as a past beneficiary with regard to the category and country concerned? (Article 3(4) of Regulation (EC) No. 3036/94)",
                    ),
                ),
                (
                    "fq_past_beneficiary_reasons",
                    models.CharField(
                        blank=True,
                        max_length=4000,
                        null=True,
                        verbose_name="If so, please attach justification below, or make reference to past correspondence.",
                    ),
                ),
                (
                    "fq_new_application",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=3,
                        null=True,
                        verbose_name="Is this a new application with regard to the category and country concerned? (Article 3(5) (2) and (3) of Regulation (EC) No. 3036/94)",
                    ),
                ),
                (
                    "fq_new_application_reasons",
                    models.CharField(
                        blank=True,
                        max_length=4000,
                        null=True,
                        verbose_name="If so, please make reference to past correspondence, or attach justification below, that the value of the third country processing will not exceed 50% of the value of your Community production in the previous year.",
                    ),
                ),
                (
                    "fq_further_authorisation",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No")],
                        max_length=3,
                        null=True,
                        verbose_name="Are you applying for a further authorisation with regard to the category and country concerned? (Article 3(5) (4) of Regulation (EC) No. 3036/94)",
                    ),
                ),
                (
                    "fq_further_authorisation_reasons",
                    models.CharField(
                        blank=True,
                        max_length=4000,
                        null=True,
                        verbose_name="If so, please attach evidence below, or make reference to past correspondence, that 50% of your previous authorisation has been re-imported or that 80% has been exported.",
                    ),
                ),
                (
                    "fq_subcontract_production",
                    models.CharField(
                        choices=[("yes", "Yes"), ("no", "No"), ("n/a", "N/A")],
                        help_text="This question only needs to be completed once per year. If you have already completed this question on a previous application this year, you may select 'N/A'.",
                        max_length=3,
                        null=True,
                        verbose_name="Does the value of your Community production in the previous year include subcontract production? (If so and you have not yet given this information, please attach declarations from subcontractors that they will not apply for the same quantities) (Article 2(2)(a) of Regulation (EC) No. 3036/94)",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("web.importapplication",),
        ),
        migrations.CreateModel(
            name="PriorSurveillanceApplication",
            fields=[
                (
                    "importapplication_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.importapplication",
                    ),
                ),
                (
                    "customs_cleared_to_uk",
                    models.BooleanField(
                        help_text="If no, a paper licence will be issued for clearance in another EU Member State.",
                        null=True,
                        verbose_name="Will the goods be customs cleared into the UK?",
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        help_text="Please note that maximum allocations apply. Please check the guidance to ensure that you do not apply for more than is allowable.",
                        null=True,
                        verbose_name="Quantity",
                    ),
                ),
                (
                    "value_gbp",
                    models.PositiveIntegerField(
                        help_text="Round up to the nearest GBP. Do not enter decimal points, commas or any other punctuation in this box. The entered value will be automatically converted to EUR.",
                        null=True,
                        verbose_name="Value (GBP/£)",
                    ),
                ),
                ("value_eur", models.PositiveIntegerField(null=True, verbose_name="Value (EUR/€)")),
            ],
            options={
                "abstract": False,
            },
            bases=("web.importapplication",),
        ),
        migrations.CreateModel(
            name="SanctionsAndAdhocApplication",
            fields=[
                (
                    "importapplication_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.importapplication",
                    ),
                ),
                ("exporter_name", models.CharField(blank=True, max_length=4096, null=True)),
                ("exporter_address", models.CharField(blank=True, max_length=4096, null=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("web.importapplication",),
        ),
        migrations.CreateModel(
            name="SILApplication",
            fields=[
                (
                    "importapplication_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.importapplication",
                    ),
                ),
                ("section1", models.BooleanField(default=False, verbose_name="Section 1")),
                ("section2", models.BooleanField(default=False, verbose_name="Section 2")),
                ("section5", models.BooleanField(default=False, verbose_name="Section 5")),
                (
                    "section58_obsolete",
                    models.BooleanField(
                        default=False, verbose_name="Section 58(2) - Obsolete Calibre"
                    ),
                ),
                (
                    "section58_other",
                    models.BooleanField(default=False, verbose_name="Section 58(2) - Other"),
                ),
                (
                    "other_description",
                    models.CharField(
                        blank=True,
                        help_text="If you have selected Other in Firearms Act Sections. Please explain why you are making this request under this 'Other' section.",
                        max_length=4000,
                        null=True,
                        verbose_name="Other Section Description",
                    ),
                ),
                (
                    "military_police",
                    models.BooleanField(
                        null=True, verbose_name="Are any of your items for the military or police?"
                    ),
                ),
                (
                    "eu_single_market",
                    models.BooleanField(
                        null=True,
                        verbose_name="Were any of your items in the EU Single Market before 14 September 2018?",
                    ),
                ),
                (
                    "manufactured",
                    models.BooleanField(
                        null=True,
                        verbose_name="Were any of your items manufactured before 1 September 1939?",
                    ),
                ),
                (
                    "commodity_code",
                    models.CharField(
                        choices=[
                            ("ex Chapter 93", "ex Chapter 93"),
                            ("ex Chapter 97", "ex Chapter 97"),
                        ],
                        help_text='You must pick the commodity code group that applies to the items that you wish to import. Please note that "ex Chapter 97" is only relevant to collectors pieces and items over 100 years old. Please contact HMRC classification advisory service, 01702 366077, if you are unsure of the correct code.',
                        max_length=40,
                        null=True,
                        verbose_name="Commodity Code",
                    ),
                ),
                ("know_bought_from", models.BooleanField(null=True)),
                ("additional_comments", models.CharField(blank=True, max_length=4000, null=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("web.importapplication",),
        ),
        migrations.CreateModel(
            name="TextilesApplication",
            fields=[
                (
                    "importapplication_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.importapplication",
                    ),
                ),
                (
                    "goods_cleared",
                    models.BooleanField(
                        help_text="If yes, a paper licence will be issued.",
                        null=True,
                        verbose_name="Will the goods be cleared in another Member State of the European Union?",
                    ),
                ),
                (
                    "shipping_year",
                    models.PositiveSmallIntegerField(
                        help_text="Date of shipment should be as shown on your export licence or other export document issued by the exporting country for goods covered by this application. The goods must be exported by 31 December. Shipment is considered to have taken place when the goods are loaded onto the exporting aircraft, vehicle or vessel.",
                        null=True,
                        verbose_name="Shipping Year",
                    ),
                ),
                (
                    "category_licence_description",
                    models.CharField(
                        help_text="By default, this is the category description. You may need to alter the description to a shorter form in order for it to display correctly on the licence.",
                        max_length=4000,
                        null=True,
                        verbose_name="Category Description",
                    ),
                ),
                (
                    "goods_description",
                    models.CharField(
                        help_text="Please describe the goods in no more than five (5) words.",
                        max_length=100,
                        null=True,
                        verbose_name="Goods Description",
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Please note that maximum allocations apply. Please check the guidance to ensure that you do not apply for more than is allowable.",
                        max_digits=9,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(limit_value=0.0)],
                        verbose_name="Quantity",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("web.importapplication",),
        ),
        migrations.CreateModel(
            name="WoodQuotaApplication",
            fields=[
                (
                    "importapplication_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="web.importapplication",
                    ),
                ),
                ("shipping_year", models.IntegerField(null=True)),
                ("exporter_name", models.CharField(max_length=100, null=True)),
                (
                    "exporter_address",
                    models.CharField(max_length=4000, null=True, verbose_name="Exporter address"),
                ),
                (
                    "exporter_vat_nr",
                    models.CharField(max_length=100, null=True, verbose_name="Exporter VAT number"),
                ),
                ("goods_description", models.CharField(max_length=100, null=True)),
                (
                    "goods_qty",
                    models.DecimalField(
                        decimal_places=2, max_digits=9, null=True, verbose_name="Quantity"
                    ),
                ),
                (
                    "goods_unit",
                    models.CharField(
                        choices=[("cubic metres", "cubic metres")],
                        max_length=40,
                        null=True,
                        verbose_name="Unit",
                    ),
                ),
                (
                    "additional_comments",
                    models.CharField(
                        blank=True, max_length=4000, null=True, verbose_name="Additional Comments"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("web.importapplication",),
        ),
        migrations.AddField(
            model_name="withdrawapplication",
            name="export_application",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="withdrawals",
                to="web.exportapplication",
            ),
        ),
        migrations.AddField(
            model_name="withdrawapplication",
            name="import_application",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="withdrawals",
                to="web.importapplication",
            ),
        ),
        migrations.AddField(
            model_name="userimportcertificate",
            name="constabulary",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="web.constabulary"
            ),
        ),
        migrations.AddField(
            model_name="sanctionsandadhocapplicationgoods",
            name="import_application",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="web.importapplication"
            ),
        ),
        migrations.AddField(
            model_name="importcontact",
            name="import_application",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="web.importapplication"
            ),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="acknowledged_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="agent",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.importer",
            ),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="agent_office",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.office",
            ),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="application_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="web.importapplicationtype"
            ),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="case_emails",
            field=models.ManyToManyField(
                related_name="_web_importapplication_case_emails_+", to="web.CaseEmail"
            ),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="case_notes",
            field=models.ManyToManyField(to="web.CaseNote"),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="case_owner",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="commodity_group",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.PROTECT, to="web.commoditygroup"
            ),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="consignment_country",
            field=models.ForeignKey(
                help_text="Select the country where the goods were shipped from.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="import_applications_to",
                to="web.country",
                verbose_name="Country Of Consignment",
            ),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="contact",
            field=models.ForeignKey(
                help_text="Select the main point of contact for the case. This will usually be the person who created the application.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="contact_import_applications",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="created_import_applications",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="further_information_requests",
            field=models.ManyToManyField(to="web.FurtherInformationRequest"),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="importer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="import_applications",
                to="web.importer",
            ),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="importer_office",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.office",
            ),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="last_updated_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="updated_import_cases",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="origin_country",
            field=models.ForeignKey(
                help_text="Select the country where the goods were made.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="import_applications_from",
                to="web.country",
                verbose_name="Country Of Origin",
            ),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="submitted_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="submitted_import_applications",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="update_requests",
            field=models.ManyToManyField(to="web.UpdateRequest"),
        ),
        migrations.AddField(
            model_name="importapplication",
            name="variation_requests",
            field=models.ManyToManyField(to="web.VariationRequest"),
        ),
        migrations.AddField(
            model_name="furtherinformationrequest",
            name="closed_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="closed_import_information_requests",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="furtherinformationrequest",
            name="deleted_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="deleted_import_information_requests",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="furtherinformationrequest",
            name="files",
            field=models.ManyToManyField(blank=True, to="web.File"),
        ),
        migrations.AddField(
            model_name="furtherinformationrequest",
            name="requested_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="requested_further_import_information",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="furtherinformationrequest",
            name="response_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="responded_import_information_requests",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="acknowledged_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="agent",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.exporter",
            ),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="agent_office",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.office",
            ),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="application_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="web.exportapplicationtype"
            ),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="case_emails",
            field=models.ManyToManyField(
                related_name="_web_exportapplication_case_emails_+", to="web.CaseEmail"
            ),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="case_notes",
            field=models.ManyToManyField(to="web.CaseNote"),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="case_owner",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="contact",
            field=models.ForeignKey(
                help_text="Select the main point of contact for the case. This will usually be the person who created the application.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="contact_export_applications",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="countries",
            field=models.ManyToManyField(
                help_text="A certificate will be created for each country selected. You may select up to 40 countries. You cannot select the same country twice, you must submit a new application.",
                to="web.Country",
            ),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="created_export_applications",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="exporter",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, related_name="+", to="web.exporter"
            ),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="exporter_office",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.office",
            ),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="further_information_requests",
            field=models.ManyToManyField(to="web.FurtherInformationRequest"),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="last_updated_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="updated_export_cases",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="submitted_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="submitted_export_application",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="update_requests",
            field=models.ManyToManyField(to="web.UpdateRequest"),
        ),
        migrations.AddField(
            model_name="exportapplication",
            name="variation_requests",
            field=models.ManyToManyField(to="web.VariationRequest"),
        ),
        migrations.AddField(
            model_name="endorsementimportapplication",
            name="import_application",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="endorsements",
                to="web.importapplication",
            ),
        ),
        migrations.AddField(
            model_name="dflgoodscertificate",
            name="issuing_country",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.country",
                verbose_name="Issuing Country",
            ),
        ),
        migrations.AddConstraint(
            model_name="cfsscheduleparagraph",
            constraint=models.UniqueConstraint(fields=("template", "name"), name="unique_name"),
        ),
        migrations.AddField(
            model_name="approvalrequest",
            name="access_request",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="approval_requests",
                to="web.accessrequest",
            ),
        ),
        migrations.AddField(
            model_name="approvalrequest",
            name="requested_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="approval_requests",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="approvalrequest",
            name="requested_from",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="assigned_approval_requests",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="approvalrequest",
            name="response_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="responded_approval_requests",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="accessrequest",
            name="closed_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="closed_access_requests",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="accessrequest",
            name="further_information_requests",
            field=models.ManyToManyField(to="web.FurtherInformationRequest"),
        ),
        migrations.AddField(
            model_name="accessrequest",
            name="last_updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="updated_access_requests",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="accessrequest",
            name="submitted_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="submitted_access_requests",
                to="web.user",
            ),
        ),
        migrations.AddField(
            model_name="woodquotachecklist",
            name="import_application",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="checklist",
                to="web.woodquotaapplication",
            ),
        ),
        migrations.AddField(
            model_name="woodquotaapplication",
            name="commodity",
            field=models.ForeignKey(
                help_text="It is the responsibility of the applicant to ensure that the commodity code in this box is correct. If you are unsure of the correct commodity code, consult the HM Revenue and Customs Integrated Tariff Book, Volume 2, which is available from the Stationery Office. If you are still in doubt, contact the Classification Advisory Service on (01702) 366077.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.commodity",
                verbose_name="Commodity Code",
            ),
        ),
        migrations.AddField(
            model_name="woodquotaapplication",
            name="contract_documents",
            field=models.ManyToManyField(
                related_name="_web_woodquotaapplication_contract_documents_+",
                to="web.WoodContractFile",
            ),
        ),
        migrations.AddField(
            model_name="woodquotaapplication",
            name="supporting_documents",
            field=models.ManyToManyField(
                related_name="_web_woodquotaapplication_supporting_documents_+", to="web.File"
            ),
        ),
        migrations.AddConstraint(
            model_name="withdrawapplication",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("import_application__isnull", False),
                    ("export_application__isnull", False),
                    _connector="OR",
                ),
                name="application_one_null",
            ),
        ),
        migrations.AddConstraint(
            model_name="withdrawapplication",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("import_application__isnull", True),
                    ("export_application__isnull", True),
                    _connector="OR",
                ),
                name="application_one_not_null",
            ),
        ),
        migrations.AddField(
            model_name="textileschecklist",
            name="import_application",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="checklist",
                to="web.textilesapplication",
            ),
        ),
        migrations.AddField(
            model_name="textilesapplication",
            name="category_commodity_group",
            field=models.ForeignKey(
                help_text="The category defines what commodities you are applying to import.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.commoditygroup",
                verbose_name="Category",
            ),
        ),
        migrations.AddField(
            model_name="textilesapplication",
            name="commodity",
            field=models.ForeignKey(
                help_text="It is the responsibility of the applicant to ensure that the commodity code in this box is correct. If you are unsure of the correct commodity code, consult the HM Revenue and Customs Integrated Tariff Book, Volume 2, which is available from the Stationery Office. If you are still in doubt, contact the Classification Advisory Service on (01702) 366077.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.commodity",
                verbose_name="Commodity Code",
            ),
        ),
        migrations.AddField(
            model_name="textilesapplication",
            name="supporting_documents",
            field=models.ManyToManyField(
                related_name="_web_textilesapplication_supporting_documents_+", to="web.File"
            ),
        ),
        migrations.AddField(
            model_name="silsupplementaryinfo",
            name="import_application",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="supplementary_info",
                to="web.silapplication",
            ),
        ),
        migrations.AddField(
            model_name="silgoodssection582other",
            name="import_application",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="goods_section582_others",
                to="web.silapplication",
            ),
        ),
        migrations.AddField(
            model_name="silgoodssection582obsolete",
            name="import_application",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="goods_section582_obsoletes",
                to="web.silapplication",
            ),
        ),
        migrations.AddField(
            model_name="silgoodssection5",
            name="import_application",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="goods_section5",
                to="web.silapplication",
            ),
        ),
        migrations.AddField(
            model_name="silgoodssection2",
            name="import_application",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="goods_section2",
                to="web.silapplication",
            ),
        ),
        migrations.AddField(
            model_name="silgoodssection1",
            name="import_application",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="goods_section1",
                to="web.silapplication",
            ),
        ),
        migrations.AddField(
            model_name="silchecklist",
            name="import_application",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="checklist",
                to="web.silapplication",
            ),
        ),
        migrations.AddField(
            model_name="silapplication",
            name="user_imported_certificates",
            field=models.ManyToManyField(
                related_name="sil_application", to="web.UserImportCertificate"
            ),
        ),
        migrations.AddField(
            model_name="silapplication",
            name="user_section5",
            field=models.ManyToManyField(related_name="sil_application", to="web.SILUserSection5"),
        ),
        migrations.AddField(
            model_name="silapplication",
            name="verified_certificates",
            field=models.ManyToManyField(
                related_name="sil_application", to="web.FirearmsAuthority"
            ),
        ),
        migrations.AddField(
            model_name="silapplication",
            name="verified_section5",
            field=models.ManyToManyField(
                related_name="_web_silapplication_verified_section5_+", to="web.Section5Authority"
            ),
        ),
        migrations.AddField(
            model_name="sanctionsandadhocapplication",
            name="supporting_documents",
            field=models.ManyToManyField(to="web.File"),
        ),
        migrations.AddField(
            model_name="priorsurveillanceapplication",
            name="commodity",
            field=models.ForeignKey(
                help_text="It is the responsibility of the applicant to ensure that the commodity code in this box is correct. If you are unsure of the correct commodity code, consult the HM Revenue & Customs at classification.enquiries@hmrc.gsi.gov.uk or use the online trade tariff https://www.gov.uk/trade-tariff/sections.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.commodity",
                verbose_name="Commodity Code",
            ),
        ),
        migrations.AddField(
            model_name="priorsurveillanceapplication",
            name="contract_file",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.priorsurveillancecontractfile",
            ),
        ),
        migrations.AddField(
            model_name="priorsurveillanceapplication",
            name="supporting_documents",
            field=models.ManyToManyField(
                related_name="_web_priorsurveillanceapplication_supporting_documents_+",
                to="web.File",
            ),
        ),
        migrations.AddField(
            model_name="outwardprocessingtradeapplication",
            name="cp_commodities",
            field=models.ManyToManyField(
                help_text="It is the responsibility of the applicant to ensure that the commodity code in this box is correct. If you are unsure of the correct commodity code, consult the HM Revenue and Customs Integrated Tariff Book, Volume 2, which is available from the Stationery Office. If you are still in doubt, contact the Classification Advisory Service on (01702) 366077.",
                related_name="_web_outwardprocessingtradeapplication_cp_commodities_+",
                to="web.Commodity",
                verbose_name="Commodity Code",
            ),
        ),
        migrations.AddField(
            model_name="outwardprocessingtradeapplication",
            name="cp_origin_country",
            field=models.ForeignKey(
                help_text="Select the country that the compensating products originate from.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.country",
                verbose_name="Country Of Origin",
            ),
        ),
        migrations.AddField(
            model_name="outwardprocessingtradeapplication",
            name="cp_processing_country",
            field=models.ForeignKey(
                help_text="Select the country that the compensating products were processed in.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.country",
                verbose_name="Country Of Processing",
            ),
        ),
        migrations.AddField(
            model_name="outwardprocessingtradeapplication",
            name="documents",
            field=models.ManyToManyField(
                related_name="_web_outwardprocessingtradeapplication_documents_+",
                to="web.OutwardProcessingTradeFile",
            ),
        ),
        migrations.AddField(
            model_name="outwardprocessingtradeapplication",
            name="teg_commodities",
            field=models.ManyToManyField(
                help_text="It is the responsibility of the applicant to ensure that the commodity code in this box is correct. If you are unsure of the correct commodity code, consult the HM Revenue and Customs Integrated Tariff Book, Volume 2, which is available from the Stationery Office. If you are still in doubt, contact the Classification Advisory Service on (01702) 366077.",
                related_name="_web_outwardprocessingtradeapplication_teg_commodities_+",
                to="web.Commodity",
                verbose_name="Commodity Code",
            ),
        ),
        migrations.AddField(
            model_name="outwardprocessingtradeapplication",
            name="teg_origin_country",
            field=models.ForeignKey(
                help_text="Select the country, or group of countries (e.g. Any EU Country) that the temporary exported goods originate from.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.country",
                verbose_name="Country Of Origin",
            ),
        ),
        migrations.AddField(
            model_name="optchecklist",
            name="import_application",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="checklist",
                to="web.outwardprocessingtradeapplication",
            ),
        ),
        migrations.AddField(
            model_name="openindividuallicenceapplication",
            name="user_imported_certificates",
            field=models.ManyToManyField(
                related_name="oil_application", to="web.UserImportCertificate"
            ),
        ),
        migrations.AddField(
            model_name="openindividuallicenceapplication",
            name="verified_certificates",
            field=models.ManyToManyField(
                related_name="oil_application", to="web.FirearmsAuthority"
            ),
        ),
        migrations.AddField(
            model_name="oilsupplementaryinfo",
            name="import_application",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="supplementary_info",
                to="web.openindividuallicenceapplication",
            ),
        ),
        migrations.AddField(
            model_name="ironsteelchecklist",
            name="import_application",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="checklist",
                to="web.ironsteelapplication",
            ),
        ),
        migrations.AddField(
            model_name="ironsteelapplication",
            name="category_commodity_group",
            field=models.ForeignKey(
                help_text="The category defines what commodities you are applying to import. This will be SA1 (coils) or SA3 (other flat products). Please see the guidance for further information regarding the coverage of the categories.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.commoditygroup",
                verbose_name="Category",
            ),
        ),
        migrations.AddField(
            model_name="ironsteelapplication",
            name="certificates",
            field=models.ManyToManyField(
                related_name="_web_ironsteelapplication_certificates_+",
                to="web.IronSteelCertificateFile",
            ),
        ),
        migrations.AddField(
            model_name="ironsteelapplication",
            name="commodity",
            field=models.ForeignKey(
                help_text="It is the responsibility of the applicant to ensure that the commodity code in this box is correct. If you are unsure of the correct commodity code, consult the HM Revenue and Customs Integrated Tariff Book, Volume 2, which is available from the Stationery Office. If you are still in doubt, contact the Classification Advisory Service on (01702) 366077.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.commodity",
                verbose_name="Commodity Code",
            ),
        ),
        migrations.AddField(
            model_name="ironsteelapplication",
            name="supporting_documents",
            field=models.ManyToManyField(
                related_name="_web_ironsteelapplication_supporting_documents_+", to="web.File"
            ),
        ),
        migrations.AddField(
            model_name="importeraccessrequest",
            name="link",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="access_requests",
                to="web.importer",
            ),
        ),
        migrations.AddField(
            model_name="gmpbrand",
            name="application",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="brands",
                to="web.certificateofgoodmanufacturingpracticeapplication",
            ),
        ),
        migrations.AddField(
            model_name="exporteraccessrequest",
            name="link",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="access_requests",
                to="web.exporter",
            ),
        ),
        migrations.AddField(
            model_name="dflsupplementaryinfo",
            name="import_application",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="supplementary_info",
                to="web.dflapplication",
            ),
        ),
        migrations.AddField(
            model_name="dflchecklist",
            name="import_application",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="checklist",
                to="web.dflapplication",
            ),
        ),
        migrations.AddField(
            model_name="dflapplication",
            name="constabulary",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.PROTECT, to="web.constabulary"
            ),
        ),
        migrations.AddField(
            model_name="dflapplication",
            name="goods_certificates",
            field=models.ManyToManyField(
                related_name="dfl_application", to="web.DFLGoodsCertificate"
            ),
        ),
        migrations.AddField(
            model_name="derogationschecklist",
            name="import_application",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="checklist",
                to="web.derogationsapplication",
            ),
        ),
        migrations.AddField(
            model_name="derogationsapplication",
            name="commodity",
            field=models.ForeignKey(
                help_text="It is the responsibility of the applicant to ensure that the commodity code in this box is correct. If you are unsure of the correct commodity code, consult the HM Revenue and Customs Integrated Tariff Book, Volume 2, which is available from the Stationery Office. If you are still in doubt, contact the Classification Advisory Service on (01702) 366077.",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="web.commodity",
                verbose_name="Commodity Code",
            ),
        ),
        migrations.AddField(
            model_name="derogationsapplication",
            name="supporting_documents",
            field=models.ManyToManyField(
                related_name="_web_derogationsapplication_supporting_documents_+", to="web.File"
            ),
        ),
        migrations.AddField(
            model_name="checklistfirearmsoilapplication",
            name="import_application",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="checklist",
                to="web.openindividuallicenceapplication",
            ),
        ),
        migrations.AddField(
            model_name="cfsschedule",
            name="application",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="schedules",
                to="web.certificateoffreesaleapplication",
            ),
        ),
        migrations.AddField(
            model_name="certificateofgoodmanufacturingpracticeapplication",
            name="supporting_documents",
            field=models.ManyToManyField(to="web.GMPFile"),
        ),
    ]
