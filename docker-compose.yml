# This docker-compose configuration is for ICMS development and CI environment.
# Production deployment does not use this configuration.
#
# see https://hub.docker.com/ for the images used here
version: "3.8"
services:
    db:
        image: postgres:13.3
        volumes:
            - pgdata:/var/lib/postgresql/data
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=password
        ports:
            - "6000:5432"
        networks:
            - backend
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U postgres" ]
            interval: 2s
            timeout: 2s
            retries: 5

    web:
        build:
            context: .
            dockerfile: local_deployment/Dockerfile
        command: local_deployment/entry.sh
        environment:
            - DJANGO_SETTINGS_MODULE
            - PYTHONUNBUFFERED=1
            - ICMS_WEB_PORT
            - ICMS_DEBUG=True # Used in entry.sh
        env_file:
            - .env
        ports:
            - "8080:8080"
        # Enable the following for PDB
#        stdin_open: true
#        tty: true
        # Add this in code: import pdb; pdb.set_trace() or breakpoint()
        # Get container ID: docker ps
        # Then attach: docker attach <container id>
        # To exit: Ctrl + P, Ctrl + Q
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_started
        volumes:
            - ./test-reports:/code/test-reports # needed for ci
            - .:/code
        networks:
          backend:
            aliases:
              - caseworker
              - export-a-certificate
              - import-a-licence
          public:
            aliases:
              - caseworker  # Required for ICMS-HMRC to communicate with ICMS.
    redis:
        # The version we will run when migrating to DBT Platform
        image: redis:7.0.15
        volumes:
            - redis_data:/data
        ports:
            - "6379"
        networks:
            - backend

    celery-worker:
        build:
            context: .
            dockerfile: local_deployment/Dockerfile
        command: celery --app=config.celery:app worker --loglevel=INFO -Q celery,mail
        environment:
            - DJANGO_SETTINGS_MODULE
        env_file:
            - .env
        depends_on:
            - redis
        volumes:
            - .:/code
        networks:
            - backend
            - public
        healthcheck:
            test: [ "CMD-SHELL", "python -m dbt_copilot_python.celery_health_check.healthcheck" ]
            interval: 10s
            timeout: 5s
            retries: 2
            start_period: 5s

    celery-beat:
        build:
            context: .
            dockerfile: local_deployment/Dockerfile
        environment:
            - DJANGO_SETTINGS_MODULE
        env_file:
            - .env
        command: celery --app=config.celery:app beat --loglevel=INFO
        depends_on:
            - redis
        volumes:
            - .:/code
        networks:
            - backend

    localstack:
        container_name: localstack_main
        image: localstack/localstack:0.14.2
        ports:
            - "4510-4559:4510-4559"  # external service port range
            - "4566:4566"            # LocalStack Edge Proxy
        environment:
            - DEBUG=0
            - DATA_DIR=/tmp/localstack/data
            - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR-}
            - DOCKER_HOST=unix:///var/run/docker.sock
            - HOSTNAME_EXTERNAL="localstack"
            - SERVICES=s3
        volumes:
            - ls_data:/tmp/localstack
            - "/var/run/docker.sock:/var/run/docker.sock"
        networks:
            - backend

    playwright-runner:
        build:
            context: .
            dockerfile: playwright/Dockerfile
        networks:
            - backend
        ipc: host
        volumes:
            - .:/code


networks:
    public:
        driver: bridge
        name: "icms_public"
    backend:
        name: "icms_backend"

volumes:
    pgdata:
    ls_data:
    redis_data:
